

var historyNotificationsLoadNumbers = new Array();

function historyNotificationsLoad(menuNumber, info) {
    let contents = document.getElementById("contents_" + menuNumber);
    let right = contents.getElementsByClassName("menu_history_right")[0];
    right.setAttribute("type", "notifications");
    right.innerHTML = `
        <div class = "menu_history_notifications">
            <div class = "menu_history_notifications_sort">
                <div class = "sort_box md-ripples" popupwidth = "max-content" value = "0" onchange = "historyNotificationsOptionLoad(` + menuNumber + `);" onclick = "selectList(this, getHistoryNotificationsSortItems());">
                    <div class = "sort_box_title value_title">` + getLanguage("history_notifications_select_sort:0") + `</div>
                    <div class = "sort_box_icon">
                        <!-- Generated by IcoMoon.io -->
                        <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M17.418 6.109c0.272-0.268 0.709-0.268 0.979 0s0.271 0.701 0 0.969l-7.908 7.83c-0.27 0.268-0.707 0.268-0.979 0l-7.908-7.83c-0.27-0.268-0.27-0.701 0-0.969s0.709-0.268 0.979 0l7.419 7.141 7.418-7.141z"></path></svg>
                    </div>
                </div>
                <div class = "sort_box md-ripples" popupwidth = "max-content" value = "0" onchange = "historyNotificationsOptionLoad(` + menuNumber + `);" onclick = "selectList(this, getHistoryNotificationsTypeItems());">
                    <div class = "sort_box_title value_title">` + getLanguage("history_notifications_select_type:0") + `</div>
                    <div class = "sort_box_icon">
                        <!-- Generated by IcoMoon.io -->
                        <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M17.418 6.109c0.272-0.268 0.709-0.268 0.979 0s0.271 0.701 0 0.969l-7.908 7.83c-0.27 0.268-0.707 0.268-0.979 0l-7.908-7.83c-0.27-0.268-0.27-0.701 0-0.969s0.709-0.268 0.979 0l7.419 7.141 7.418-7.141z"></path></svg>
                    </div>
                </div>
            </div>
            <div class = "menu_history_notifications_items"></div>
            <div class = "menu_history_right_notifications_no_data" style = "display: none;">
                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="50" height="50" viewBox="0 0 50 50"><defs><clipPath id="b"><rect width="50" height="50"/></clipPath></defs><g id="a" clip-path="url(#b)"><path d="M-3094.635,49.5H-3116.5a3,3,0,0,1-3-3V3.5a3,3,0,0,1,3-3h31a3,3,0,0,1,3,3V37.365L-3094.635,49.5Z" transform="translate(3126)" opacity="0.7"/><path d="M3151.333,49.5l12.293-12.293h-9.846a2.517,2.517,0,0,0-1.983.575,2.884,2.884,0,0,0-.464,2.039Z" transform="translate(-3120)" opacity="0.6"/></g></svg>
                <div class = "menu_history_right_notifications_no_data_title">
                    ` + getLanguage("history_notifications_no_data") + `
                </div>
                <div class = "menu_history_right_notifications_no_data_description">
                    ` + getLanguage("no_data_description") + `
                </div>
            </div>
        </div>
        <div class = "history_notifications_contents_loading" style = "padding: 20px; display: none;">
            <div class="showbox"><div class="loader" style="width: 35px;"><svg class="circular" viewBox="25 25 50 50"><circle class="path" cx="50" cy="50" r="20" fill="none" stroke-width="5" stroke-miterlimit="10"></circle></svg></div></div>
        </div>
    `;
    let option_items = contents.getElementsByClassName("menu_history_left_wrap_option_items")[0];
    option_items.innerHTML = `
        <div class = "menu_history_left_wrap_option_item md-ripples" onclick = "historyClearNotificationsButton(` + menuNumber + `);">
            <div class = "menu_history_left_wrap_option_item_icon">
                <!-- Generated by IcoMoon.io -->
                <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 22 28"><path d="M8 11.5v9c0 0.281-0.219 0.5-0.5 0.5h-1c-0.281 0-0.5-0.219-0.5-0.5v-9c0-0.281 0.219-0.5 0.5-0.5h1c0.281 0 0.5 0.219 0.5 0.5zM12 11.5v9c0 0.281-0.219 0.5-0.5 0.5h-1c-0.281 0-0.5-0.219-0.5-0.5v-9c0-0.281 0.219-0.5 0.5-0.5h1c0.281 0 0.5 0.219 0.5 0.5zM16 11.5v9c0 0.281-0.219 0.5-0.5 0.5h-1c-0.281 0-0.5-0.219-0.5-0.5v-9c0-0.281 0.219-0.5 0.5-0.5h1c0.281 0 0.5 0.219 0.5 0.5zM18 22.813v-14.812h-14v14.812c0 0.75 0.422 1.188 0.5 1.188h13c0.078 0 0.5-0.438 0.5-1.188zM7.5 6h7l-0.75-1.828c-0.047-0.063-0.187-0.156-0.266-0.172h-4.953c-0.094 0.016-0.219 0.109-0.266 0.172zM22 6.5v1c0 0.281-0.219 0.5-0.5 0.5h-1.5v14.812c0 1.719-1.125 3.187-2.5 3.187h-13c-1.375 0-2.5-1.406-2.5-3.125v-14.875h-1.5c-0.281 0-0.5-0.219-0.5-0.5v-1c0-0.281 0.219-0.5 0.5-0.5h4.828l1.094-2.609c0.313-0.766 1.25-1.391 2.078-1.391h5c0.828 0 1.766 0.625 2.078 1.391l1.094 2.609h4.828c0.281 0 0.5 0.219 0.5 0.5z"></path></svg>
            </div>
            <div class = "menu_history_left_wrap_option_item_right">
                <div class = "menu_history_left_wrap_option_item_right_title">
                    ` + getLanguage("history_notifications_option_title:clear") + `
                </div>
                <div class = "menu_history_left_wrap_option_item_right_description">
                    ` + getLanguage("history_notifications_option_description:clear") + `
                </div>
            </div>
        </div>
        <div class = "menu_history_left_wrap_option_item md-ripples" onclick = "historyNotificationsReplyPause(` + menuNumber + `);">
            <div class = "menu_history_left_wrap_option_item_icon">
                <!-- Generated by IcoMoon.io -->
                <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M23 12c0-3.037-1.232-5.789-3.222-7.778s-4.741-3.222-7.778-3.222-5.789 1.232-7.778 3.222-3.222 4.741-3.222 7.778 1.232 5.789 3.222 7.778 4.741 3.222 7.778 3.222 5.789-1.232 7.778-3.222 3.222-4.741 3.222-7.778zM21 12c0 2.486-1.006 4.734-2.636 6.364s-3.878 2.636-6.364 2.636-4.734-1.006-6.364-2.636-2.636-3.878-2.636-6.364 1.006-4.734 2.636-6.364 3.878-2.636 6.364-2.636 4.734 1.006 6.364 2.636 2.636 3.878 2.636 6.364zM11 15v-6c0-0.552-0.448-1-1-1s-1 0.448-1 1v6c0 0.552 0.448 1 1 1s1-0.448 1-1zM15 15v-6c0-0.552-0.448-1-1-1s-1 0.448-1 1v6c0 0.552 0.448 1 1 1s1-0.448 1-1z"></path></svg>
            </div>
            <div class = "menu_history_left_wrap_option_item_right">
                <div class = "menu_history_left_wrap_option_item_right_title">
                    ` + getLanguage("history_notifications_option_title:reply_pause") + `
                </div>
                <div class = "menu_history_left_wrap_option_item_right_description">
                    ` + getLanguage("history_notifications_option_description:reply_pause") + `
                </div>
            </div>
        </div>
        <div class = "menu_history_left_wrap_option_item md-ripples" style = "display: none;" onclick = "historyNotificationsReplyUse(` + menuNumber + `);">
            <div class = "menu_history_left_wrap_option_item_icon">
                <!-- Generated by IcoMoon.io -->
                <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 20.016q3.281 0 5.648-2.367t2.367-5.648-2.367-5.648-5.648-2.367-5.648 2.367-2.367 5.648 2.367 5.648 5.648 2.367zM12 2.016q4.125 0 7.055 2.93t2.93 7.055-2.93 7.055-7.055 2.93-7.055-2.93-2.93-7.055 2.93-7.055 7.055-2.93zM9.984 16.5v-9l6 4.5z"></path></svg>
            </div>
            <div class = "menu_history_left_wrap_option_item_right">
                <div class = "menu_history_left_wrap_option_item_right_title">
                    ` + getLanguage("history_notifications_option_title:reply_use") + `
                </div>
                <div class = "menu_history_left_wrap_option_item_right_description">
                    ` + getLanguage("history_notifications_option_description:reply_use") + `
                </div>
            </div>
        </div>
        <div class = "menu_history_left_wrap_option_item md-ripples" onclick = "historyNotificationsActivityPause(` + menuNumber + `);">
            <div class = "menu_history_left_wrap_option_item_icon">
                <!-- Generated by IcoMoon.io -->
                <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M23 12c0-3.037-1.232-5.789-3.222-7.778s-4.741-3.222-7.778-3.222-5.789 1.232-7.778 3.222-3.222 4.741-3.222 7.778 1.232 5.789 3.222 7.778 4.741 3.222 7.778 3.222 5.789-1.232 7.778-3.222 3.222-4.741 3.222-7.778zM21 12c0 2.486-1.006 4.734-2.636 6.364s-3.878 2.636-6.364 2.636-4.734-1.006-6.364-2.636-2.636-3.878-2.636-6.364 1.006-4.734 2.636-6.364 3.878-2.636 6.364-2.636 4.734 1.006 6.364 2.636 2.636 3.878 2.636 6.364zM11 15v-6c0-0.552-0.448-1-1-1s-1 0.448-1 1v6c0 0.552 0.448 1 1 1s1-0.448 1-1zM15 15v-6c0-0.552-0.448-1-1-1s-1 0.448-1 1v6c0 0.552 0.448 1 1 1s1-0.448 1-1z"></path></svg>
            </div>
            <div class = "menu_history_left_wrap_option_item_right">
                <div class = "menu_history_left_wrap_option_item_right_title">
                    ` + getLanguage("history_notifications_option_title:activity_pause") + `
                </div>
                <div class = "menu_history_left_wrap_option_item_right_description">
                    ` + getLanguage("history_notifications_option_description:activity_pause") + `
                </div>
            </div>
        </div>
        <div class = "menu_history_left_wrap_option_item md-ripples" style = "display: none;" onclick = "historyNotificationsActivityUse(` + menuNumber + `);">
            <div class = "menu_history_left_wrap_option_item_icon">
                <!-- Generated by IcoMoon.io -->
                <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 20.016q3.281 0 5.648-2.367t2.367-5.648-2.367-5.648-5.648-2.367-5.648 2.367-2.367 5.648 2.367 5.648 5.648 2.367zM12 2.016q4.125 0 7.055 2.93t2.93 7.055-2.93 7.055-7.055 2.93-7.055-2.93-2.93-7.055 2.93-7.055 7.055-2.93zM9.984 16.5v-9l6 4.5z"></path></svg>
            </div>
            <div class = "menu_history_left_wrap_option_item_right">
                <div class = "menu_history_left_wrap_option_item_right_title">
                    ` + getLanguage("history_notifications_option_title:activity_use") + `
                </div>
                <div class = "menu_history_left_wrap_option_item_right_description">
                    ` + getLanguage("history_notifications_option_description:activity_use") + `
                </div>
            </div>
        </div>
        <div class = "menu_history_left_wrap_option_item md-ripples" onclick = "historyNotificationsLouibooksPause(` + menuNumber + `);">
            <div class = "menu_history_left_wrap_option_item_icon">
                <!-- Generated by IcoMoon.io -->
                <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M23 12c0-3.037-1.232-5.789-3.222-7.778s-4.741-3.222-7.778-3.222-5.789 1.232-7.778 3.222-3.222 4.741-3.222 7.778 1.232 5.789 3.222 7.778 4.741 3.222 7.778 3.222 5.789-1.232 7.778-3.222 3.222-4.741 3.222-7.778zM21 12c0 2.486-1.006 4.734-2.636 6.364s-3.878 2.636-6.364 2.636-4.734-1.006-6.364-2.636-2.636-3.878-2.636-6.364 1.006-4.734 2.636-6.364 3.878-2.636 6.364-2.636 4.734 1.006 6.364 2.636 2.636 3.878 2.636 6.364zM11 15v-6c0-0.552-0.448-1-1-1s-1 0.448-1 1v6c0 0.552 0.448 1 1 1s1-0.448 1-1zM15 15v-6c0-0.552-0.448-1-1-1s-1 0.448-1 1v6c0 0.552 0.448 1 1 1s1-0.448 1-1z"></path></svg>
            </div>
            <div class = "menu_history_left_wrap_option_item_right">
                <div class = "menu_history_left_wrap_option_item_right_title">
                    ` + getLanguage("history_notifications_option_title:louibooks_pause") + `
                </div>
                <div class = "menu_history_left_wrap_option_item_right_description">
                    ` + getLanguage("history_notifications_option_description:louibooks_pause") + `
                </div>
            </div>
        </div>
        <div class = "menu_history_left_wrap_option_item md-ripples" style = "display: none;" onclick = "historyNotificationsLouibooksUse(` + menuNumber + `);">
            <div class = "menu_history_left_wrap_option_item_icon">
                <!-- Generated by IcoMoon.io -->
                <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 20.016q3.281 0 5.648-2.367t2.367-5.648-2.367-5.648-5.648-2.367-5.648 2.367-2.367 5.648 2.367 5.648 5.648 2.367zM12 2.016q4.125 0 7.055 2.93t2.93 7.055-2.93 7.055-7.055 2.93-7.055-2.93-2.93-7.055 2.93-7.055 7.055-2.93zM9.984 16.5v-9l6 4.5z"></path></svg>
            </div>
            <div class = "menu_history_left_wrap_option_item_right">
                <div class = "menu_history_left_wrap_option_item_right_title">
                    ` + getLanguage("history_notifications_option_title:louibooks_use") + `
                </div>
                <div class = "menu_history_left_wrap_option_item_right_description">
                    ` + getLanguage("history_notifications_option_description:louibooks_use") + `
                </div>
            </div>
        </div>
    `;
    let wrap_line = contents.getElementsByClassName("menu_history_left_wrap_line")[0];
    wrap_line.style.display = null;

    //
    historyNotificationsLoadNumbers[menuNumber] = info["numbers"].split(",");
    isHistoryNotificationsMoreLoad[menuNumber] = null;

    //
    let notificationsInfo = info["info"];
    if (notificationsInfo != null && notificationsInfo.length != 0) {
        for (let i = 0; i < notificationsInfo.length; i++) {
            addHistoryNotificationsItem(menuNumber, notificationsInfo[i]);

            let array = historyNotificationsLoadNumbers[menuNumber];
            array = array.remove("" + notificationsInfo[i]["number"]);
            historyNotificationsLoadNumbers[menuNumber] = array;
        }
        checkHistoryNotificationsMoreLoading(menuNumber);
    } else {
        historyNotificationsNoData(menuNumber);
    }

    if (info["replyNotificationsUse"] == true) {
        historyNotificationsReplyPauseActivate(menuNumber);
    } else {
        historyNotificationsReplyUseActivate(menuNumber);
    }
    if (info["activityNotificationsUse"] == true) {
        historyNotificationsActivityPauseActivate(menuNumber);
    } else {
        historyNotificationsActivityUseActivate(menuNumber);
    }
    if (info["louibooksNotificationsUse"] == true) {
        historyNotificationsLouibooksPauseActivate(menuNumber);
    } else {
        historyNotificationsLouibooksUseActivate(menuNumber);
    }
}
function historyNotificationsNoData(menuNumber) {
    let contents = document.getElementById("contents_" + menuNumber);
    let items = contents.getElementsByClassName("menu_history_notifications_items")[0];
    items.textContent = "";

    let option_items = contents.getElementsByClassName("menu_history_left_wrap_option_items")[0].children;
    option_items[0].classList.add("menu_history_left_wrap_option_item_disabled");

    let no_data = contents.getElementsByClassName("menu_history_right_notifications_no_data")[0];
    no_data.style.display = "flex";
}
function addHistoryNotificationsItem(menuNumber, info) {
    let contents = document.getElementById("contents_" + menuNumber);
    let items = contents.getElementsByClassName("menu_history_notifications_items")[0];

    let option_items = contents.getElementsByClassName("menu_history_left_wrap_option_items")[0].children;
    option_items[0].classList.remove("menu_history_left_wrap_option_item_disabled");

    //데이터 없음 숨기기
    let no_data = contents.getElementsByClassName("menu_history_right_notifications_no_data")[0];
    no_data.style.display = "none";

    let newEl = document.createElement("div");
    newEl.setAttribute("number", info["number"]);
    newEl.setAttribute("oncontextmenu", "historyNotificationsMoreButton(" + menuNumber + ", " + info["number"] + ", event);");
    newEl.classList.add("visible_element");
    newEl.classList.add("variable_element");
    newEl.innerHTML = getHtmlNotificationsItem(info);

    items.appendChild(newEl);
}




















function historyNotificationsReplyPauseActivate(menuNumber) {
    let contents = document.getElementById("contents_" + menuNumber);
    let option_items = contents.getElementsByClassName("menu_history_left_wrap_option_items")[0].children;
    option_items[1].style.display = null;
    option_items[2].style.display = "none";
}
function historyNotificationsReplyUseActivate(menuNumber) {
    let contents = document.getElementById("contents_" + menuNumber);
    let option_items = contents.getElementsByClassName("menu_history_left_wrap_option_items")[0].children;
    option_items[1].style.display = "none";
    option_items[2].style.display = null;
}

function historyNotificationsActivityPauseActivate(menuNumber) {
    let contents = document.getElementById("contents_" + menuNumber);
    let option_items = contents.getElementsByClassName("menu_history_left_wrap_option_items")[0].children;
    option_items[3].style.display = null;
    option_items[4].style.display = "none";
}
function historyNotificationsActivityUseActivate(menuNumber) {
    let contents = document.getElementById("contents_" + menuNumber);
    let option_items = contents.getElementsByClassName("menu_history_left_wrap_option_items")[0].children;
    option_items[3].style.display = "none";
    option_items[4].style.display = null;
}

function historyNotificationsLouibooksPauseActivate(menuNumber) {
    let contents = document.getElementById("contents_" + menuNumber);
    let option_items = contents.getElementsByClassName("menu_history_left_wrap_option_items")[0].children;
    option_items[5].style.display = null;
    option_items[6].style.display = "none";
}
function historyNotificationsLouibooksUseActivate(menuNumber) {
    let contents = document.getElementById("contents_" + menuNumber);
    let option_items = contents.getElementsByClassName("menu_history_left_wrap_option_items")[0].children;
    option_items[5].style.display = "none";
    option_items[6].style.display = null;
}



























function historyNotificationsReplyPause(menuNumber) {
    confirmPopup(getLanguage("history_notifications_option_title:reply_pause"), getLanguage("history_notifications_option_description:reply_pause"), 'requesthistoryNotificationsReplyPauseUseWorks(' + menuNumber + ', false);');
}
function historyNotificationsReplyUse(menuNumber) {
    confirmPopup(getLanguage("history_notifications_option_title:reply_use"), getLanguage("history_notifications_option_description:reply_use"), 'requesthistoryNotificationsReplyPauseUseWorks(' + menuNumber + ', true);');
}
function requesthistoryNotificationsReplyPauseUseWorks(menuNumber, isUse) {
    loading();

    const xhr = new XMLHttpRequest();
    const method = "POST";
    
    if (isUse == false) {
        xhr.open(method, "/php/history/notifications/reply_pause.php");
    } else {
        xhr.open(method, "/php/history/notifications/reply_use.php");
    }
    
    xhr.addEventListener('readystatechange', function (event) {
        const { target } = event;
        if (target.readyState === XMLHttpRequest.DONE) {
            const { status } = target;
            if (status === 0 || (status >= 200 && status < 400)) {
                let xhrHtml = xhr.responseText;

                if (isUse == false) {
                    historyNotificationsReplyUseActivate(menuNumber);
                    actionMessage(getLanguage("history_notifications_reply_pause_message"));
                } else {
                    historyNotificationsReplyPauseActivate(menuNumber);
                    actionMessage(getLanguage("history_notifications_reply_use_message"));
                }
            } else {
                if (status == 504) {
                    //시간 초과
                    serverResponseErrorMessage(0);
                } else {
                    //오류 발생
                    serverResponseErrorMessage(1);
                }
            }
            loadingComplete();
        }
    });

    var formData = new FormData();

    xhr.send(formData);
}







function historyNotificationsActivityPause(menuNumber) {
    confirmPopup(getLanguage("history_notifications_option_title:activity_pause"), getLanguage("history_notifications_option_description:activity_pause"), 'requesthistoryNotificationsActivityPauseUseWorks(' + menuNumber + ', false);');
}
function historyNotificationsActivityUse(menuNumber) {
    confirmPopup(getLanguage("history_notifications_option_title:activity_use"), getLanguage("history_notifications_option_description:activity_use"), 'requesthistoryNotificationsActivityPauseUseWorks(' + menuNumber + ', true);');
}
function requesthistoryNotificationsActivityPauseUseWorks(menuNumber, isUse) {
    loading();

    const xhr = new XMLHttpRequest();
    const method = "POST";
    
    if (isUse == false) {
        xhr.open(method, "/php/history/notifications/activity_pause.php");
    } else {
        xhr.open(method, "/php/history/notifications/activity_use.php");
    }
    
    xhr.addEventListener('readystatechange', function (event) {
        const { target } = event;
        if (target.readyState === XMLHttpRequest.DONE) {
            const { status } = target;
            if (status === 0 || (status >= 200 && status < 400)) {
                let xhrHtml = xhr.responseText;

                if (isUse == false) {
                    historyNotificationsActivityUseActivate(menuNumber);
                    actionMessage(getLanguage("history_notifications_activity_pause_message"));
                } else {
                    historyNotificationsActivityPauseActivate(menuNumber);
                    actionMessage(getLanguage("history_notifications_activity_use_message"));
                }
            } else {
                if (status == 504) {
                    //시간 초과
                    serverResponseErrorMessage(0);
                } else {
                    //오류 발생
                    serverResponseErrorMessage(1);
                }
            }
            loadingComplete();
        }
    });

    var formData = new FormData();

    xhr.send(formData);
}







function historyNotificationsLouibooksPause(menuNumber) {
    confirmPopup(getLanguage("history_notifications_option_title:louibooks_pause"), getLanguage("history_notifications_option_description:louibooks_pause"), 'requesthistoryNotificationsLouibooksPauseUseWorks(' + menuNumber + ', false);');
}
function historyNotificationsLouibooksUse(menuNumber) {
    confirmPopup(getLanguage("history_notifications_option_title:louibooks_use"), getLanguage("history_notifications_option_description:louibooks_use"), 'requesthistoryNotificationsLouibooksPauseUseWorks(' + menuNumber + ', true);');
}
function requesthistoryNotificationsLouibooksPauseUseWorks(menuNumber, isUse) {
    loading();

    const xhr = new XMLHttpRequest();
    const method = "POST";
    
    if (isUse == false) {
        xhr.open(method, "/php/history/notifications/louibooks_pause.php");
    } else {
        xhr.open(method, "/php/history/notifications/louibooks_use.php");
    }
    
    xhr.addEventListener('readystatechange', function (event) {
        const { target } = event;
        if (target.readyState === XMLHttpRequest.DONE) {
            const { status } = target;
            if (status === 0 || (status >= 200 && status < 400)) {
                let xhrHtml = xhr.responseText;

                if (isUse == false) {
                    historyNotificationsLouibooksUseActivate(menuNumber);
                    actionMessage(getLanguage("history_notifications_louibooks_pause_message"));
                } else {
                    historyNotificationsLouibooksPauseActivate(menuNumber);
                    actionMessage(getLanguage("history_notifications_louibooks_use_message"));
                }
            } else {
                if (status == 504) {
                    //시간 초과
                    serverResponseErrorMessage(0);
                } else {
                    //오류 발생
                    serverResponseErrorMessage(1);
                }
            }
            loadingComplete();
        }
    });

    var formData = new FormData();

    xhr.send(formData);
}




















































function showHistoryNotificationsMoreLoading(menuNumber) {
    let contents = document.getElementById("contents_" + menuNumber);
    let loading = contents.getElementsByClassName("history_notifications_contents_loading")[0];
    loading.style.display = "block";
}
function hideHistoryNotificationsMoreLoading(menuNumber) {
    let contents = document.getElementById("contents_" + menuNumber);
    let loading = contents.getElementsByClassName("history_notifications_contents_loading")[0];
    loading.style.display = "none";
}
function checkHistoryNotificationsMoreLoading(menuNumber) {
    if (historyNotificationsLoadNumbers[menuNumber] == null || historyNotificationsLoadNumbers[menuNumber].length == 0) {
        hideHistoryNotificationsMoreLoading(menuNumber);
        historyNotificationsLoadNumbers[menuNumber] = null;
    } else {
        showHistoryNotificationsMoreLoading(menuNumber);
    }
}

let isHistoryNotificationsMoreLoad = new Array();

function checkHistoryNotificationsLoad() {
    if (getCurrentMenuName() == "history") {
        let right = contents.getElementsByClassName("menu_history_right")[0];
        if (right.getAttribute("type") == "notifications") {
            let boxSize = 75;

            let scrollPercent = ((document.documentElement.scrollTop + window.innerHeight) / (document.documentElement.scrollHeight - boxSize)) * 100;
            if (scrollPercent >= 100) {
                let number = getCurrentMenuNumber();
                if (isHistoryNotificationsMoreLoad[number] == null) {
                    isHistoryNotificationsMoreLoad[number] = true;
                    moreLoadHistoryNotifications(number);
                }
            }
        }
    }
}
addEventListener("scroll", checkHistoryNotificationsLoad);
addEventListener("resize", checkHistoryNotificationsLoad);
addEventListener("focus", checkHistoryNotificationsLoad);

function moreLoadHistoryNotifications(menuNumber) {
    if (historyNotificationsLoadNumbers[menuNumber] == null || historyNotificationsLoadNumbers[menuNumber] == '' || historyNotificationsLoadNumbers[menuNumber].length == 0) {
        historyNotificationsLoadNumbers[menuNumber] = null;
        isHistoryNotificationsMoreLoad[menuNumber] = null;
        return;
    }

    let numbers = historyNotificationsLoadNumbers[menuNumber];
    let numbersMaxCount = (numbers.length >= 25) ? 25 : numbers.length;
    numbers = numbers.splice(0, numbersMaxCount);

    const xhr = new XMLHttpRequest();
    const method = "POST";
    
    xhr.open(method, "/php/user_notifications/getInfo.php");
    
    xhr.addEventListener('readystatechange', function (event) {
        const { target } = event;
        if (target.readyState === XMLHttpRequest.DONE) {
            const { status } = target;
            if (status === 0 || (status >= 200 && status < 400)) {
                let xhrHtml = xhr.responseText;
                let info = JSON.parse(xhrHtml);

                for (let i = 0; i < info.length; i++) {
                    addHistoryNotificationsItem(menuNumber, info[i]);

                    let array = historyNotificationsLoadNumbers[menuNumber];
                    array = array.remove("" + info[i]["number"]);
                    historyNotificationsLoadNumbers[menuNumber] = array;
                }

                isHistoryNotificationsMoreLoad[menuNumber] = null;
                checkHistoryNotificationsMoreLoading(menuNumber);
            } else {
                if (status == 504) {
                    //시간 초과
                    serverResponseErrorMessage(0);
                } else {
                    //오류 발생
                    serverResponseErrorMessage(1);
                }
            }
        }
    });
    
    var formData = new FormData();
    formData.append("lang", userLanguage);
    formData.append("numbers", numbers.join(","));

    xhr.send(formData);
}




































function historyNotificationsOptionLoad(menuNumber) {
    let contents = document.getElementById("contents_" + menuNumber);
    let items = contents.getElementsByClassName("menu_history_notifications_items")[0];
    let sort_box = contents.getElementsByClassName("sort_box");

    loading();

    const xhr = new XMLHttpRequest();
    const method = "POST";
    
    xhr.open(method, "/php/user_notifications/getInfoNumbers.php");
    
    xhr.addEventListener('readystatechange', function (event) {
        const { target } = event;
        if (target.readyState === XMLHttpRequest.DONE) {
            const { status } = target;
            if (status === 0 || (status >= 200 && status < 400)) {
                let xhrHtml = xhr.responseText;
                let info = JSON.parse(xhrHtml);
                let notificationsInfo = info["info"];

                items.textContent = "";
                historyNotificationsLoadNumbers[menuNumber] = info["numbers"].split(",");

                if (notificationsInfo != null && notificationsInfo.length != 0) {
                    for (let i = 0; i < notificationsInfo.length; i++) {
                        addHistoryNotificationsItem(menuNumber, notificationsInfo[i]);
                
                        let array = historyNotificationsLoadNumbers[menuNumber];
                        array = array.remove("" + notificationsInfo[i]["number"]);
                        historyNotificationsLoadNumbers[menuNumber] = array;
                    }
                    checkHistoryNotificationsMoreLoading(menuNumber);
                } else {
                    historyNotificationsNoData(menuNumber);
                }
            } else {
                if (status == 504) {
                    //시간 초과
                    serverResponseErrorMessage(0);
                } else {
                    //오류 발생
                    serverResponseErrorMessage(1);
                }
            }
            loadingComplete();
        }
    });

    var formData = new FormData();
    formData.append("lang", userLanguage);
    formData.append("sort", sort_box[0].getAttribute("value"));
    formData.append("type", sort_box[1].getAttribute("value"));

    xhr.send(formData);
}









































function requestHistoryNotificationsLoad(menuNumber) {
    loading();

    const xhr = new XMLHttpRequest();
    const method = "POST";
    
    xhr.open(method, "/php/history/notifications/getInfoNumbers.php");
    
    xhr.addEventListener('readystatechange', function (event) {
        const { target } = event;
        if (target.readyState === XMLHttpRequest.DONE) {
            const { status } = target;
            if (status === 0 || (status >= 200 && status < 400)) {
                let xhrHtml = xhr.responseText;
                let info = JSON.parse(xhrHtml);

                historyNotificationsLoad(menuNumber, info);
                requestMenuHistoryConfirmNotifications(); //알림 확인함
            } else {
                if (status == 504) {
                    //시간 초과
                    serverResponseErrorMessage(0);
                } else {
                    //오류 발생
                    serverResponseErrorMessage(1);
                }
            }
            loadingComplete();
        }
    });

    var formData = new FormData();
    formData.append("lang", userLanguage);
    formData.append("sort", 0);
    formData.append("type", 0);

    xhr.send(formData);
}












































function historyNotificationsMoreButton(menuNumber, number, event) {
    let slot = new Array();
    slot[0] = {
        'icon': '<!-- Generated by IcoMoon.io --><svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 22 28"><path d="M8 11.5v9c0 0.281-0.219 0.5-0.5 0.5h-1c-0.281 0-0.5-0.219-0.5-0.5v-9c0-0.281 0.219-0.5 0.5-0.5h1c0.281 0 0.5 0.219 0.5 0.5zM12 11.5v9c0 0.281-0.219 0.5-0.5 0.5h-1c-0.281 0-0.5-0.219-0.5-0.5v-9c0-0.281 0.219-0.5 0.5-0.5h1c0.281 0 0.5 0.219 0.5 0.5zM16 11.5v9c0 0.281-0.219 0.5-0.5 0.5h-1c-0.281 0-0.5-0.219-0.5-0.5v-9c0-0.281 0.219-0.5 0.5-0.5h1c0.281 0 0.5 0.219 0.5 0.5zM18 22.813v-14.812h-14v14.812c0 0.75 0.422 1.188 0.5 1.188h13c0.078 0 0.5-0.438 0.5-1.188zM7.5 6h7l-0.75-1.828c-0.047-0.063-0.187-0.156-0.266-0.172h-4.953c-0.094 0.016-0.219 0.109-0.266 0.172zM22 6.5v1c0 0.281-0.219 0.5-0.5 0.5h-1.5v14.812c0 1.719-1.125 3.187-2.5 3.187h-13c-1.375 0-2.5-1.406-2.5-3.125v-14.875h-1.5c-0.281 0-0.5-0.219-0.5-0.5v-1c0-0.281 0.219-0.5 0.5-0.5h4.828l1.094-2.609c0.313-0.766 1.25-1.391 2.078-1.391h5c0.828 0 1.766 0.625 2.078 1.391l1.094 2.609h4.828c0.281 0 0.5 0.219 0.5 0.5z"></path></svg>',
        'title': getLanguage("delete"),
        'onclick': 'historyDeleteNotifications(' + menuNumber + ', ' + number + ');',
        'class': 'more_button_item_delete',
    };
    moreButton(null, slot, event);
}
function historyDeleteNotifications(menuNumber, number) {
    let contents = document.getElementById("contents_" + menuNumber);
    let items = contents.getElementsByClassName("menu_history_notifications_items")[0].children;

    loading();

    const xhr = new XMLHttpRequest();
    const method = "POST";
    
    xhr.open(method, "/php/user_notifications/delete.php");
    
    xhr.addEventListener('readystatechange', function (event) {
        const { target } = event;
        if (target.readyState === XMLHttpRequest.DONE) {
            const { status } = target;
            if (status === 0 || (status >= 200 && status < 400)) {
                let xhrHtml = xhr.responseText;
                
                let item = null;
                for (let i = 0; i < items.length; i++) {
                    if (items[i].getAttribute("number") == number) {
                        item = items[i];
                        break;
                    }
                }

                let height = item.clientHeight;
                item.style.maxHeight = height + "px";
                item.style.transition = "all 0.2s";
                function callback() {
                    item.style.maxHeight = "0px";
                    item.style.marginBottom = "-10px";
                    item.style.animation = "deleteMenuHistoryNotificationsItem 0.2s forwards";
                    setTimeout(() => {
                        item.remove();

                        if (items.length == 0) {
                            historyNotificationsNoData(menuNumber);
                        }
                    }, 200);
                }
                window.requestAnimationFrame(callback);
            } else {
                if (status == 504) {
                    //시간 초과
                    serverResponseErrorMessage(0);
                } else {
                    //오류 발생
                    serverResponseErrorMessage(1);
                }
            }
            loadingComplete();
        }
    });

    var formData = new FormData();
    formData.append("number", number);

    xhr.send(formData);
}
































































function historyClearNotificationsButton(menuNumber) {
    confirmPopup(getLanguage("confirm_popup_title:delete"), getLanguage("confirm_popup_subject:delete"), 'requestHistoryClearNotifications(' + menuNumber + ');');
}
function requestHistoryClearNotifications(menuNumber) {
    loading();

    const xhr = new XMLHttpRequest();
    const method = "POST";
    
    xhr.open(method, "/php/user_notifications/clear.php");
    
    xhr.addEventListener('readystatechange', function (event) {
        const { target } = event;
        if (target.readyState === XMLHttpRequest.DONE) {
            const { status } = target;
            if (status === 0 || (status >= 200 && status < 400)) {
                let xhrHtml = xhr.responseText;
                
                actionMessage(getLanguage("history_notifications_clear_message"));
                historyNotificationsNoData(menuNumber);
            } else {
                if (status == 504) {
                    //시간 초과
                    serverResponseErrorMessage(0);
                } else {
                    //오류 발생
                    serverResponseErrorMessage(1);
                }
            }
            loadingComplete();
        }
    });

    var formData = new FormData();

    xhr.send(formData);
}
















































function requestMenuHistoryConfirmNotifications() {
    let new_notifications = document.getElementsByClassName("header_right_button_new_notifications");
    for (let i = 0; i < new_notifications.length; i++) {
        new_notifications[i].style.display = "none";
    }
    loginStatus["not_confirm_notifications"] = 0;

    const xhr = new XMLHttpRequest();
    const method = "POST";
    
    xhr.open(method, "/php/user_notifications/confirm.php");
    
    xhr.addEventListener('readystatechange', function (event) {
        const { target } = event;
        if (target.readyState === XMLHttpRequest.DONE) {
            const { status } = target;
            if (status === 0 || (status >= 200 && status < 400)) {
                let xhrHtml = xhr.responseText;
                
            } else {
                if (status == 504) {
                    //시간 초과
                    serverResponseErrorMessage(0);
                } else {
                    //오류 발생
                    serverResponseErrorMessage(1);
                }
            }
        }
    });

    var formData = new FormData();

    xhr.send(formData);
}







































function getHistoryNotificationsSortItems() {
    let items = new Array();
    items[0] = {
        "title": getLanguage("history_notifications_select_sort:0"),
        "value": 0
    }
    items[1] = {
        "title": getLanguage("history_notifications_select_sort:1"),
        "value": 1
    }
    return items;
}
function getHistoryNotificationsTypeItems() {
    let items = new Array();
    items[0] = {
        "title": getLanguage("history_notifications_select_type:0"),
        "value": 0
    }
    items[1] = {
        "title": getLanguage("history_notifications_select_type:1"),
        "value": 1
    }
    items[2] = {
        "title": getLanguage("history_notifications_select_type:2"),
        "value": 2
    }
    items[3] = {
        "title": getLanguage("history_notifications_select_type:3"),
        "value": 3
    }
    items[4] = {
        "title": getLanguage("history_notifications_select_type:4"),
        "value": 4
    }
    items[5] = {
        "title": getLanguage("history_notifications_select_type:5"),
        "value": 5
    }
    return items;
}