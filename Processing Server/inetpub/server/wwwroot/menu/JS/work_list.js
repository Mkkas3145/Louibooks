

function registerWorkListLoad(menuNumber, info) {
    function callback() {
        if (loginStatus != null && myWorkList != null) {
            workListLoad(menuNumber, info);
        } else {
            window.requestAnimationFrame(callback);
        }
    }
    window.requestAnimationFrame(callback);
}

var workListLoadNumbers = new Array();

function workListLoad(menuNumber, info) {
    let contents = document.getElementById("contents_" + menuNumber);
    let work_contents = contents.getElementsByClassName("work_contents")[0];
    if (info == null) {
        info = JSON.parse(contents.getElementsByClassName("work_list_info")[0].innerHTML);
    }

    //초기화
    workListLoadNumbers[menuNumber] = null;
    isWorkListMoreLoad[menuNumber] = null;
    work_contents.textContent = "";

    //데이터 없음
    let no_data = contents.getElementsByClassName("menu_work_list_no_data")[0];
    no_data.getElementsByClassName("menu_work_list_no_data_title")[0].innerHTML = getLanguage("work_list_no_data");
    no_data.getElementsByClassName("menu_work_list_no_data_description")[0].innerHTML = getLanguage("no_data_description");

    //
    let worksInfo = info["worksInfo"];
    if (worksInfo != null && worksInfo.length != 0) {
        workListLoadNumbers[menuNumber] = info["workNumbers"].split(",");

        for (let i = 0; i < worksInfo.length; i++) {
            addWorkItemWorkList(menuNumber, worksInfo[i]);

            let array = workListLoadNumbers[menuNumber];
            array = array.remove("" + worksInfo[i]["number"]);
            workListLoadNumbers[menuNumber] = array;
        }
        checkWorkListMoreLoading(menuNumber);
    } else {
        workListNoData(menuNumber);
    }

    //
    let thumbnail = contents.getElementsByClassName("menu_work_list_left_thumbnail")[0];
    if (info["thumbnailImage"] != null) {
        thumbnail.innerHTML = `
            <div class = "img_wrap">
                <img src = "` + info["thumbnailImage"] + `" onload = "imageLoad(event);" alt = "">
                <div class = "work_list_left_bottom">
                    <div class = "work_list_left_bottom_box">
                        <div class = "work_list_left_bottom_box_count">
                            ` + info["count"] + `
                        </div>
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="50" height="50" viewBox="0 0 50 50"><defs><clipPath id="b"><rect width="50" height="50"></rect></clipPath></defs><g id="a" clip-path="url(#b)"><rect width="37" height="3" rx="1.5" transform="translate(1 2)"></rect><rect width="37" height="3" rx="1.5" transform="translate(1 18)"></rect><rect width="20" height="3" rx="1.5" transform="translate(1 34)"></rect><g transform="translate(2.518 0.541)"><rect width="3" height="17" rx="1.5" transform="translate(23.151 35.438) rotate(-45)"></rect><rect width="3" height="23" rx="1.5" transform="translate(44.884 26.041) rotate(30)"></rect></g></g></svg>
                    </div>
                </div>
            </div>
        `;
    } else {
        thumbnail.innerHTML = `
            <div class = "work_list_left_no_thumbnail">
                <!-- Generated by IcoMoon.io -->
                <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 18 18"><path d="M9 1c-4.418 0-8 3.582-8 8s3.582 8 8 8 8-3.582 8-8-3.582-8-8-8zM3 9c0-1.294 0.416-2.491 1.116-3.472l8.356 8.356c-0.981 0.7-2.178 1.116-3.472 1.116-3.309 0-6-2.691-6-6zM13.884 12.472l-8.356-8.356c0.981-0.7 2.178-1.116 3.472-1.116 3.309 0 6 2.691 6 6 0 1.294-0.416 2.491-1.116 3.472z"></path></svg>
                <div class = "work_list_left_no_thumbnail_title">
                    ` + getLanguage("work_list_thumbnail") + `
                </div>
            </div>
        `;
    }

    //공개 상태
    let public_status = contents.getElementsByClassName("menu_work_list_left_public_status")[0];
    public_status.setAttribute("value", info["publicStatus"]);
    public_status.setAttribute("previous_value", info["publicStatus"]);
    let public_status_children = public_status.children;
    public_status_children[0].getElementsByTagName("span")[0].innerHTML = getLanguage("public_status:0");
    public_status_children[1].getElementsByTagName("span")[0].innerHTML = getLanguage("public_status:1");
    public_status_children[2].getElementsByTagName("span")[0].innerHTML = getLanguage("public_status:2");
    //권한
    if (loginStatus["isLogin"] == true && loginStatus["number"] == info["userNumber"]) {
        public_status.classList.add("menu_work_list_left_public_status_activate");
        public_status.classList.add("md-ripples");
        public_status.setAttribute("onclick", "selectList(this, getWorkListPublicStateItems());");
        public_status.setAttribute("onchange", "workListChangePublicStateButton(" + menuNumber + ", " + info["number"] + ");");
    }

    //작품 제목
    let title_wrap = contents.getElementsByClassName("menu_work_list_left_title_wrap")[0];
    let title = contents.getElementsByClassName("menu_work_list_left_title")[0];
    if (loginStatus["isLogin"] == true && loginStatus["number"] == info["userNumber"]) {
        title_wrap.style.display = "block";
        title.style.display = "none";

        title = contents.getElementsByClassName("menu_work_list_left_change_title")[0];
        title.innerHTML = `
            <div class = "menu_work_list_left_change_title_left">
                ` + info["title"] + `
            </div>
            <div class = "menu_work_list_left_change_title_right md-ripples" onclick = "showWorkListTitleInputBox(` + menuNumber + `);" onmouseenter = "hoverInformation(this, getLanguage('work_list_change_title:edit_title'));">
                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="50" height="50" viewBox="0 0 50 50"><defs><clipPath id="b"><rect width="50" height="50"></rect></clipPath></defs><g id="a" clip-path="url(#b)"><path d="M-4.438,42.27v0L.4,28.587,21.847,7.145a2.12,2.12,0,0,1,1.506-.632,1.945,1.945,0,0,1,1.387.567l7.071,7.071a1.944,1.944,0,0,1,.567,1.433,2.125,2.125,0,0,1-.632,1.459L10.3,38.487-4.436,42.27ZM23.387,9.839h0L3.162,30.064-.327,38.621l9.154-2.892L29.052,15.5,23.387,9.839Z" transform="translate(5.102 6.536)"></path><path d="M28.7,19.1a1.987,1.987,0,0,1-1.414-.586l-7.071-7.071a2,2,0,0,1,0-2.828l6.368-6.368a2,2,0,0,1,2.829,0l7.071,7.071a2,2,0,0,1,0,2.828L30.116,18.51A1.987,1.987,0,0,1,28.7,19.1ZM27.995,5.067h0l-4.95,4.95,5.666,5.665,4.95-4.949L27.995,5.067Z" transform="translate(12.102 -0.464)"></path></g></svg>
            </div>
        `;
        let input_box = contents.getElementsByClassName("menu_work_list_left_title_input_box")[0];
        input_box.innerHTML = `
            <div class = "menu_work_list_left_title_input">
                <input type = "text" value = "` + info["title"] + `" placeholder = "` + getLanguage("popup_add_work_list_input_placeholder") + `" onfocus = "workListTitleInputFocus(this);" onblur = "workListTitleInputBlur(this);" onkeydown = "workListTitleInputKeyDown(this);">
                <div class = "menu_work_list_left_title_input_line_wrap"></div>
            </div>
            <div class = "menu_work_list_left_title_bottom">
                <div class = "menu_work_list_left_title_bottom_cancel md-ripples" onclick = "hideWorkListTitleInputBox(` + menuNumber + `);" onmouseenter = "hoverInformation(this, getLanguage('work_list_change_title:cancel'));">
                    <!-- Generated by IcoMoon.io -->
                    <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 18 18"><path d="M9 1c-4.418 0-8 3.582-8 8s3.582 8 8 8 8-3.582 8-8-3.582-8-8-8zM3 9c0-1.294 0.416-2.491 1.116-3.472l8.356 8.356c-0.981 0.7-2.178 1.116-3.472 1.116-3.309 0-6-2.691-6-6zM13.884 12.472l-8.356-8.356c0.981-0.7 2.178-1.116 3.472-1.116 3.309 0 6 2.691 6 6 0 1.294-0.416 2.491-1.116 3.472z"></path></svg>
                </div>
                <div class = "menu_work_list_left_title_bottom_submit md-ripples" onclick = "workListChangeTitleButton(` + menuNumber + `, ` + info["number"] + `);" onmouseenter = "hoverInformation(this, getLanguage('work_list_change_title:edit_title'));">
                    <!-- Generated by IcoMoon.io -->
                    <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M12.3 3.7l4 4-12.3 12.3h-4v-4l12.3-12.3zM13.7 2.3l2.3-2.3 4 4-2.3 2.3-4-4z"></path></svg>
                </div>
            </div>
        `;
    } else {
        title.innerHTML = info["title"];
    }

    //수정된 날짜
    let updated_date = contents.getElementsByClassName("menu_work_list_left_updated_date")[0];
    updated_date.getElementsByTagName("span")[0].innerHTML = getLanguage("work_list_updated_date").replaceAll("{R:0}", getTimePast(new Date(info["updated_date"])));

    //정렬
    let sort_title = contents.getElementsByClassName("sort_box_title");
    if (sort_title[0].innerHTML == "") {
        sort_title[0].innerHTML = getLanguage("work_list_select_sort:0");
    }
    if (sort_title[1].innerHTML == "") {
        sort_title[1].innerHTML = getLanguage("work_list_select_work_type:0");
    }

    //유저 프로필
    let profile = contents.getElementsByClassName("menu_work_list_left_user_info_profile")[0];
    profile.innerHTML = `
        <div class = "profile_element">
            <div class = "profile_info">` + JSON.stringify(info["profile"]) + `</div>
            <div class = "profile_image"></div>
        </div>
    `;
    let nickname = contents.getElementsByClassName("menu_work_list_left_user_info_nickname")[0];
    nickname.innerHTML = info["nickname"];
    nickname.setAttribute("onclick", "loadMenu_user(" + info["userNumber"] + ");");

    //
    let button_items = contents.getElementsByClassName("menu_work_list_left_button_items")[0];
    if (loginStatus["isLogin"] == true) {
        let button_items_children = button_items.children;
        let checked = false;
        for (let i = 0; i < myWorkList.length; i++) {
            if (myWorkList[i]["number"] == info["number"]) {
                checked = true;
            }
        }
        button_items_children[0].setAttribute("checked", checked);
        if (loginStatus["isLogin"] == true && loginStatus["number"] != info["userNumber"]) {
            button_items_children[0].style.display = "flex";
        } else {
            button_items_children[1].style.display = "flex";
        }
    } else {
        button_items.style.display = "none";
    }

    //배경 백그라운드 그라데이션 효과
    let background = contents.getElementsByClassName("menu_work_list_left_background")[0].getElementsByTagName("img")[0];
    background.src = info["thumbnailImage"];

    checkMenuWorkListBackground();
}
function workListNoData(menuNumber) {
    let contents = document.getElementById("contents_" + menuNumber);
    let no_data = contents.getElementsByClassName("menu_work_list_no_data")[0];
    no_data.style.display = "flex";
}



function showWorkListTitleInputBox(menuNumber) {
    let contents = document.getElementById("contents_" + menuNumber);
    let wrap = contents.getElementsByClassName("menu_work_list_left_title_wrap")[0];
    let height = wrap.clientHeight; //height

    let title = contents.getElementsByClassName("menu_work_list_left_change_title")[0];
    let input_box = contents.getElementsByClassName("menu_work_list_left_title_input_box")[0];
    title.style.display = "none";
    input_box.style.display = "block";

    //
    let titleText = contents.getElementsByClassName("menu_work_list_left_change_title_left")[0].innerText.trim();
    input_box.getElementsByTagName("input")[0].value = "";
    input_box.getElementsByTagName("input")[0].value = titleText;

    //포커스
    let input = input_box.getElementsByTagName("input")[0];
    input.setAttribute("original_value", titleText);
    input.focus();

    let currentHeight = wrap.clientHeight; //height

    //
    if (height != currentHeight) {
        wrap.style.height = (height + 10) + "px";
        function callback() {
            wrap.style.height = (currentHeight + 10) + "px";
            setTimeout(() => {
                wrap.style.height = null;
            }, 200);
        }
        window.requestAnimationFrame(callback);
    }

    //
    workListTitleInputKeyDown(input);
}
function hideWorkListTitleInputBox(menuNumber) {
    let contents = document.getElementById("contents_" + menuNumber);
    let wrap = contents.getElementsByClassName("menu_work_list_left_title_wrap")[0];
    let height = wrap.clientHeight; //height

    let title = contents.getElementsByClassName("menu_work_list_left_change_title")[0];
    let input_box = contents.getElementsByClassName("menu_work_list_left_title_input_box")[0];
    let input = input_box.getElementsByTagName("input")[0];
    title.style.display = null;
    input_box.style.display = null;

    let currentHeight = wrap.clientHeight; //height

    //
    if (height != currentHeight) {
        wrap.style.height = height + "px";
        function callback() {
            wrap.style.height = currentHeight + "px";
            setTimeout(() => {
                wrap.style.height = null;
            }, 200);
        }
        window.requestAnimationFrame(callback);
    }

    let submit = contents.getElementsByClassName("menu_work_list_left_title_bottom_submit")[0];
    submit.classList.remove("menu_work_list_left_title_bottom_submit_activate");
}
function addWorkItemWorkList(menuNumber, info) {
    let contents = document.getElementById("contents_" + menuNumber);
    let sort = contents.getElementsByClassName("sort_box")[0].getAttribute("value");
    let workType = contents.getElementsByClassName("sort_box")[1].getAttribute("value");
    let workListInfo = JSON.parse(contents.getElementsByClassName("work_list_info")[0].innerHTML);
    let work_contents = contents.getElementsByClassName("work_contents")[0];
    let work_list = contents.getElementsByClassName("menu_work_list")[0];

    let work_list_info = JSON.parse(contents.getElementsByClassName("work_list_info")[0].innerHTML);

    //정렬모드를 사용하기 위한 앨리먼트
    if ((sort == 0 || sort == "0") && (workType == 0 || workType == "0") && workListInfo["userNumber"] == loginStatus["number"]) {
        let order = Number.parseInt(work_contents.getAttribute("order"));
        let itemOrder = Number.parseInt(work_contents.getAttribute("item_order"));

        //
        if (order == 0) {
            let newEl = document.createElement("div");
            newEl.setAttribute("order", order);
            newEl.style.order = itemOrder;
            newEl.classList.add("menu_work_list_sort_mode_change_order_wrap");
            work_contents.appendChild(newEl);
        }

        //
        let newEl = document.createElement("div");
        newEl.setAttribute("oncontextmenu", "workListWorkMoreItems(event, " + menuNumber + ", " + work_list_info["number"] + ", " + info["number"] + ", " + work_list_info["userNumber"] + ");");
        newEl.setAttribute("work_number", info["number"]);
        newEl.setAttribute("order", order);
        newEl.style.order = itemOrder + 1;
        newEl.classList.add("visible_element");
        newEl.classList.add("variable_element"); //Height 변함
        newEl.innerHTML = `
            <div class = "menu_work_list_work_item_sort_mode">
                <div class = "menu_work_list_work_item_sort_mode_drag_handle" ontouchstart = "touchStartWorkListDragHandle(event);">
                    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="50" height="50" viewBox="0 0 50 50"><defs><clipPath id="b"><rect width="50" height="50"/></clipPath></defs><g id="a" clip-path="url(#b)"><g transform="translate(0 11)"><rect width="48" height="3" rx="1.5" transform="translate(1 4)"/><rect width="48" height="3" rx="1.5" transform="translate(1 22)"/></g></g></svg>
                </div>
                <div class = "menu_work_list_work_item_sort_mode_right">
                    ` + getHtmlWork(info) + `
                </div>
            </div>
        `;
        if (work_list.classList.contains("menu_work_list_sort_mode")) {
            newEl.classList.add("menu_work_list_sort_mode_item");
            newEl.setAttribute("onmousedown", "touchStartWorkListSort(event, this);");
            newEl.setAttribute("ontouchstart", "touchStartWorkListSort(event, this);");
        }
        work_contents.appendChild(newEl);

        //
        newEl = document.createElement("div");
        newEl.setAttribute("order", (order + 1));
        newEl.style.order = (itemOrder + 2);
        newEl.classList.add("menu_work_list_sort_mode_change_order_wrap");
        work_contents.appendChild(newEl);

        work_contents.setAttribute("order", order + 1);
        work_contents.setAttribute("item_order", itemOrder + 2);
    } else {
        //일반 작품 앨리먼트
        let newEl = document.createElement("div");
        newEl.setAttribute("oncontextmenu", "workListWorkMoreItems(event, " + menuNumber + ", " + work_list_info["number"] + ", " + info["number"] + ", " + work_list_info["userNumber"] + ");");
        newEl.setAttribute("work_number", info["number"]);
        newEl.classList.add("visible_element");
        newEl.innerHTML = getHtmlWork(info);
        work_contents.appendChild(newEl);
    }
}





function workListTitleInputFocus(input) {
    let parent = input.parentElement;
    parent.classList.add("menu_work_list_left_title_input_focus");
}
function workListTitleInputBlur(input) {
    let parent = input.parentElement;
    parent.classList.remove("menu_work_list_left_title_input_focus");
}
function workListTitleInputKeyDown(input) {
    function callback() {
        let submit = input.parentElement.parentElement.getElementsByClassName("menu_work_list_left_title_bottom_submit")[0];
        let originalValue = input.getAttribute("original_value").trim();
        let value = input.value.trim();

        if (value == originalValue || value == "") {
            submit.classList.remove("menu_work_list_left_title_bottom_submit_activate");
        } else {
            submit.classList.add("menu_work_list_left_title_bottom_submit_activate");
        }
    }
    window.requestAnimationFrame(callback);
}








function showWorkListMoreLoading(menuNumber) {
    let contents = document.getElementById("contents_" + menuNumber);
    let loading = contents.getElementsByClassName("work_list_contents_loading")[0];
    loading.style.display = "block";
}
function hideWorkListMoreLoading(menuNumber) {
    let contents = document.getElementById("contents_" + menuNumber);
    let loading = contents.getElementsByClassName("work_list_contents_loading")[0];
    loading.style.display = "none";
}
function checkWorkListMoreLoading(menuNumber) {
    if (workListLoadNumbers[menuNumber].length == 0) {
        hideWorkListMoreLoading(menuNumber);
        workListLoadNumbers[menuNumber] = null;
    } else {
        showWorkListMoreLoading(menuNumber);
    }
}

let isWorkListMoreLoad = new Array();

function checkWorkListLoad() {
    if (getCurrentMenuName() == "work_list") {
        let boxSize = 75;

        let scrollPercent = ((document.documentElement.scrollTop + window.innerHeight) / (document.documentElement.scrollHeight - boxSize)) * 100;
        if (scrollPercent >= 100) {
            let number = getCurrentMenuNumber();
            if (isWorkListMoreLoad[number] == null) {
                isWorkListMoreLoad[number] = true;
                moreLoadWorkList(number);
            }
        }
    }
}
addEventListener("scroll", checkWorkListLoad);
addEventListener("resize", checkWorkListLoad);
addEventListener("focus", checkWorkListLoad);






function moreLoadWorkList(menuNumber) {
    if (workListLoadNumbers[menuNumber] == null || workListLoadNumbers[menuNumber].length == 0) {
        workListLoadNumbers[menuNumber] = null;
        isWorkListMoreLoad[menuNumber] = null;
        return;
    }

    let numbers = workListLoadNumbers[menuNumber];
    let numbersMaxCount = (numbers.length >= 24) ? 24 : numbers.length;
    numbers = numbers.splice(0, numbersMaxCount);

    const xhr = new XMLHttpRequest();
    const method = "POST";
    
    xhr.open(method, "/php/work/getInfo.php");
    
    xhr.addEventListener('readystatechange', function (event) {
        const { target } = event;
        if (target.readyState === XMLHttpRequest.DONE) {
            const { status } = target;
            if (status === 0 || (status >= 200 && status < 400)) {
                let xhrHtml = xhr.responseText;
                let info = JSON.parse(xhrHtml);

                for (let i = 0; i < info.length; i++) {
                    addWorkItemWorkList(menuNumber, info[i]);
                }

                //
                for (let i = 0; i < numbers.length; i++) {
                    let array = workListLoadNumbers[menuNumber];
                    array = array.remove("" + numbers[i]);
                    workListLoadNumbers[menuNumber] = array;
                }

                isWorkListMoreLoad[menuNumber] = null;
                checkWorkListMoreLoading(menuNumber);
            } else {
                if (status == 504) {
                    //시간 초과
                    serverResponseErrorMessage(0);
                } else {
                    //오류 발생
                    serverResponseErrorMessage(1);
                }
            }
        }
    });
    
    var formData = new FormData();
    formData.append("lang", userLanguage);
    formData.append("numbers", numbers.join(","));

    xhr.send(formData);
}







































function workListChangeTitleButton(menuNumber, workListNumber) {
    let contents = document.getElementById("contents_" + menuNumber);
    let input = contents.getElementsByClassName("menu_work_list_left_title_input")[0].getElementsByTagName("input")[0];
    
    requestWorkListChangeTitle(menuNumber, workListNumber, input.value.trim());
}
function requestWorkListChangeTitle(menuNumber, workListNumber, title, isPrevious) {
    (isPrevious == null) ? isPrevious = false : null;

    let contents = document.getElementById("contents_" + menuNumber);
    let previousTitle = contents.getElementsByClassName("menu_work_list_left_change_title_left")[0].innerHTML.trim();

    loading();

    const xhr = new XMLHttpRequest();
    const method = "POST";
    
    xhr.open(method, "/php/work_list/change_title.php");
    
    xhr.addEventListener('readystatechange', function (event) {
        const { target } = event;
        if (target.readyState === XMLHttpRequest.DONE) {
            const { status } = target;
            if (status === 0 || (status >= 200 && status < 400)) {
                let xhrHtml = xhr.responseText;

                //제목 값 변경
                let titleText = contents.getElementsByClassName("menu_work_list_left_change_title_left")[0];
                titleText.textContent = title;
                changeTitleMyWorkList(workListNumber, title);

                if (isPrevious == false) {
                    actionMessage(getLanguage("work_list_change_title_message"), "requestWorkListChangeTitle(" + menuNumber + ", " + workListNumber + ", \'" + previousTitle + "\', true);");
                } else {
                    actionMessage(getLanguage("work_list_change_title_message"));
                }

                hideWorkListTitleInputBox(menuNumber);
            } else {
                if (status == 504) {
                    //시간 초과
                    serverResponseErrorMessage(0);
                } else {
                    //오류 발생
                    serverResponseErrorMessage(1);
                }
            }
            loadingComplete();
        }
    });

    var formData = new FormData();
    formData.append("workListNumber", workListNumber);
    formData.append("title", title);

    xhr.send(formData);
}





























function workListChangePublicStateButton(menuNumber, workListNumber) {
    let contents = document.getElementById("contents_" + menuNumber);
    let value = contents.getElementsByClassName("menu_work_list_left_public_status")[0].getAttribute("value");
    
    requestWorkListChangePublicState(menuNumber, workListNumber, value);
}
function requestWorkListChangePublicState(menuNumber, workListNumber, publicStatus, isPrevious) {
    (isPrevious == null) ? isPrevious = false : null;

    let contents = document.getElementById("contents_" + menuNumber);
    let public_status = contents.getElementsByClassName("menu_work_list_left_public_status")[0]
    let previousPublicState = public_status.getAttribute("previous_value");

    loading();

    const xhr = new XMLHttpRequest();
    const method = "POST";
    
    xhr.open(method, "/php/work_list/change_public_status.php");
    
    xhr.addEventListener('readystatechange', function (event) {
        const { target } = event;
        if (target.readyState === XMLHttpRequest.DONE) {
            const { status } = target;
            if (status === 0 || (status >= 200 && status < 400)) {
                let xhrHtml = xhr.responseText;

                //제목 값 변경
                public_status.setAttribute("value", publicStatus);

                if (isPrevious == false) {
                    actionMessage(getLanguage("change_public_status_message:" + publicStatus), "requestWorkListChangePublicState(" + menuNumber + ", " + workListNumber + ", \'" + previousPublicState + "\', true);");
                } else {
                    actionMessage(getLanguage("change_public_status_message:" + publicStatus));
                }
            } else {
                if (status == 504) {
                    //시간 초과
                    serverResponseErrorMessage(0);
                } else {
                    //오류 발생
                    serverResponseErrorMessage(1);
                }
            }
            loadingComplete();
        }
    });

    var formData = new FormData();
    formData.append("workListNumber", workListNumber);
    formData.append("publicStatus", publicStatus);

    public_status.setAttribute("previous_value", publicStatus);

    xhr.send(formData);
}





















function workListSaveButton(menuNumber, workListNumber, checked) {
    if (checked == true) {
        checked = "false";
    } else if (checked == false) {
        checked = "true";
    }

    let contents = document.getElementById("contents_" + menuNumber);
    let items = contents.getElementsByClassName("menu_work_list_left_button_items")[0];
    let button = items.children[0];
    if (checked == null) {
        checked = button.getAttribute("checked");
    }
    
    if (checked == "true") {
        checked = false;
        actionMessage(getLanguage("work_list_save_delete_message"));
    } else if (checked == "false") {
        checked = true;
        actionMessage(getLanguage("work_list_save_insert_message"));
    }

    button.setAttribute("checked", checked);
    requestWorkListSave(workListNumber, checked);
}
function requestWorkListSave(workListNumber, checked) {
    const xhr = new XMLHttpRequest();
    const method = "POST";
    
    if (checked == true) {
        xhr.open(method, "/php/work_list/save_insert.php");
    } else {
        xhr.open(method, "/php/work_list/save_delete.php");
        deleteMyWorkList(workListNumber);
    }
    
    xhr.addEventListener('readystatechange', function (event) {
        const { target } = event;
        if (target.readyState === XMLHttpRequest.DONE) {
            const { status } = target;
            if (status === 0 || (status >= 200 && status < 400)) {
                let xhrHtml = xhr.responseText;

                if (checked == true) {
                    let info = JSON.parse(xhrHtml);
                    insertMyWorkList(info[0]);
                }
            } else {
                if (status == 504) {
                    //시간 초과
                    serverResponseErrorMessage(0);
                } else {
                    //오류 발생
                    serverResponseErrorMessage(1);
                }
            }
        }
    });

    var formData = new FormData();
    formData.append("workListNumber", workListNumber);

    xhr.send(formData);
}



































function deleteWorkListMenuWorkList(menuNumber, workListNumber) {
    confirmPopup(getLanguage("confirm_popup_title:delete"), getLanguage("confirm_popup_subject:delete"), 'requestWorkListDelete(' + menuNumber + ', ' + workListNumber + ');');
}
function requestWorkListDelete(menuNumber, workListNumber) {
    const xhr = new XMLHttpRequest();
    const method = "POST";
    
    xhr.open(method, "/php/work_list/delete.php");
    
    xhr.addEventListener('readystatechange', function (event) {
        const { target } = event;
        if (target.readyState === XMLHttpRequest.DONE) {
            const { status } = target;
            if (status === 0 || (status >= 200 && status < 400)) {
                let xhrHtml = xhr.responseText;

                deleteMyWorkList(workListNumber);
                deleteMenu(menuNumber);

                actionMessage(getLanguage("work_list_delete_message"));
            } else {
                if (status == 504) {
                    //시간 초과
                    serverResponseErrorMessage(0);
                } else {
                    //오류 발생
                    serverResponseErrorMessage(1);
                }
            }
        }
    });

    var formData = new FormData();
    formData.append("workListNumber", workListNumber);

    xhr.send(formData);
}

























function requestWorkListWorkDelete(menuNumber, workListNumber, workNumber) {
    let contents = document.getElementById("contents_" + menuNumber);
    let work_contents = contents.getElementsByClassName("work_contents")[0];

    loading();

    const xhr = new XMLHttpRequest();
    const method = "POST";
    
    xhr.open(method, "/php/work_list/delete_work.php");
    
    xhr.addEventListener('readystatechange', function (event) {
        const { target } = event;
        if (target.readyState === XMLHttpRequest.DONE) {
            const { status } = target;
            if (status === 0 || (status >= 200 && status < 400)) {
                let xhrHtml = xhr.responseText;

                let children = work_contents.children;
                for (let i = 0; i < children.length; i++) {
                    if (children[i].getAttribute("work_number") == workNumber) {
                        children[i].remove();
                    }
                }

                //체크
                if (children.length == 0 && (workListLoadNumbers[menuNumber] == null || workListLoadNumbers[menuNumber].length == 0)) {
                    workListNoData(menuNumber);
                }

                deleteWorkMyWorkList(workListNumber, workNumber);
                actionMessage(getLanguage("work_list_delete_work_message"));
            } else {
                if (status == 504) {
                    //시간 초과
                    serverResponseErrorMessage(0);
                } else {
                    //오류 발생
                    serverResponseErrorMessage(1);
                }
            }
            loadingComplete();
        }
    });

    var formData = new FormData();
    formData.append("workListNumber", workListNumber);
    formData.append("workNumber", workNumber);

    xhr.send(formData);
}





































function workListOptionLoad(workListNumber, menuNumber) {
    let contents = document.getElementById("contents_" + menuNumber);
    let sort_box = contents.getElementsByClassName("sort_box");
    let work_contents = contents.getElementsByClassName("work_contents")[0];
    work_contents.setAttribute("order", 0);

    let children = contents.getElementsByClassName("menu_work_list_left_button_items")[0].children;
    if ((sort_box[0].getAttribute("value") == 0 || sort_box[0].getAttribute("value") == "0") && (sort_box[1].getAttribute("value") == 0 || sort_box[1].getAttribute("value") == "0")) {
        children[1].classList.remove("menu_work_list_left_button_item_disabled");
    } else {
        children[1].classList.add("menu_work_list_left_button_item_disabled");
    }

    loading();

    const xhr = new XMLHttpRequest();
    const method = "POST";
    
    xhr.open(method, "/php/work_list/getListInfo.php");
    
    xhr.addEventListener('readystatechange', function (event) {
        const { target } = event;
        if (target.readyState === XMLHttpRequest.DONE) {
            const { status } = target;
            if (status === 0 || (status >= 200 && status < 400)) {
                let xhrHtml = xhr.responseText;
                let info = JSON.parse(xhrHtml);

                registerWorkListLoad(menuNumber, info);
            } else {
                if (status == 504) {
                    //시간 초과
                    serverResponseErrorMessage(0);
                } else {
                    //오류 발생
                    serverResponseErrorMessage(1);
                }
            }
            loadingComplete();
        }
    });

    var formData = new FormData();
    formData.append("lang", userLanguage);
    formData.append("workListNumber", workListNumber);
    formData.append("sort", sort_box[0].getAttribute("value"));
    formData.append("workType", sort_box[1].getAttribute("value"));

    xhr.send(formData);
}











































function workListSortButton(menuNumber) {
    let contents = document.getElementById("contents_" + menuNumber);
    let work_list = contents.getElementsByClassName("menu_work_list")[0];

    let children = contents.getElementsByClassName("menu_work_list_left_button_items")[0].children;
    if (children[1].getAttribute("checked") == "false") {
        children[1].setAttribute("checked", "true");
        work_list.classList.add("menu_work_list_sort_mode");
    
        //정렬 박스 숨기기
        let right_sort = contents.getElementsByClassName("menu_work_list_right_sort")[0];
        let height = right_sort.clientHeight;
        right_sort.style.height = height + "px";
        right_sort.style.opacity = 1;
        function callback() {
            right_sort.style.height = "0px";
            right_sort.style.opacity = 0;
            right_sort.style.marginBottom = "0px";
            setTimeout(() => {
                right_sort.style.height = null;
                right_sort.style.opacity = null;
                right_sort.style.marginBottom = null;
                right_sort.style.display = "none";
            }, 200);
        }
        window.requestAnimationFrame(callback);
    
        //클래스 추가
        let work_contents = contents.getElementsByClassName("work_contents")[0];
        children = work_contents.children;
        for (let i = 0; i < children.length; i++) {
            if (children[i].classList.contains("visible_element")) {
                children[i].classList.add("menu_work_list_sort_mode_item");
                children[i].setAttribute("onmousedown", "touchStartWorkListSort(event, this);");
                children[i].setAttribute("ontouchstart", "touchStartWorkListSort(event, this);");
            }
        }
    } else {
        children[1].setAttribute("checked", "false");
        work_list.classList.remove("menu_work_list_sort_mode");

        //정렬 박스 보이게
        let right_sort = contents.getElementsByClassName("menu_work_list_right_sort")[0];
        right_sort.style.display = null;
        let height = right_sort.clientHeight;
        right_sort.style.height = "0px";
        right_sort.style.marginBottom = "0px";
        right_sort.style.opacity = 0;
        function callback() {
            right_sort.style.height = height + "px";
            right_sort.style.opacity = 1;
            right_sort.style.marginBottom = null;
            setTimeout(() => {
                right_sort.style.height = null;
                right_sort.style.opacity = null;
                right_sort.style.marginBottom = null;
            }, 200);
        }
        window.requestAnimationFrame(callback);

        //클래스 제거
        let work_contents = contents.getElementsByClassName("work_contents")[0];
        children = work_contents.children;
        for (let i = 0; i < children.length; i++) {
            if (children[i].classList.contains("visible_element")) {
                children[i].style.transition = null;
                children[i].classList.remove("menu_work_list_sort_mode_item");
                children[i].setAttribute("onmousedown", null);
                children[i].setAttribute("ontouchstart", null);
            }
        }
    }

    //체크
    isForcedProcessingVariableElement = true; //강제 처리함
    checkVariableElementCurrentMenu(); //체크
    isForcedProcessingVariableElement = false; //강제 처리 안해도 됨
}




function touchStartWorkListDragHandle(event) {
    setBodyScroll(false); //스크롤 금지
    ignorePullToRefresh = true;

    function end() {
        document.removeEventListener("touchend", end);
        document.removeEventListener("touchcancel", end);

        setBodyScroll(true); //스크롤 허용
        ignorePullToRefresh = false;
    }

    //터치 이벤트
    document.addEventListener("touchend", end);
    document.addEventListener("touchcancel", end);
}

function touchStartWorkListSort(event, el) {
    if (event.type == "touchstart" && ignorePullToRefresh == false) {
        return;
    }
    let isBodyScroll = true;

    let menuNumber = getCurrentMenuNumber();
    let contents = document.getElementById("contents_" + menuNumber);
    let workContents = contents.getElementsByClassName("work_contents")[0];
    let item = el;
    let previousOrder = item.getAttribute("order");

    let children = contents.getElementsByClassName("work_contents")[0].children;
    for (let i = 0; i < children.length; i++) {
        if (children[i].classList.contains("visible_element")) {
            children[i].style.transition = null;
            children[i].style.position = null;
            children[i].style.zIndex = null;
            children[i].style.top = null;
        }
    }

    //height 고정
    workContents.style.height = workContents.clientHeight + "px";
    let previousScrollY = document.documentElement.scrollTop;

    let isEnd = false;
    let isBottom = false;
    let relativeY = null;
    let firstY = null;
    function move(event) {
        let y = null;
        if (event.type == "touchmove") {
            y = event.touches[0].pageY;
        } else if (event.type == "mousemove") {
            y = event.pageY;
        }

        let itemRect = item.getBoundingClientRect();
        let itemHeight = (itemRect.height - 10);

        if (firstY == null) {
            setBodyScroll(false); //스크롤 금지
            isBodyScroll = false;

            let children = contents.getElementsByClassName("work_contents")[0].children;
            for (let i = 0; i < children.length; i++) {
                if (children[i].classList.contains("visible_element") == false) {
                    if (children[i].getAttribute("order") == item.getAttribute("order")) {
                        children[i].style.transition = "all 0s";
                        children[i].setAttribute("area", "true");
                        function callback() {
                            children[i].style.transition = null;
                        }
                        window.requestAnimationFrame(callback);
                        break;
                    }
                }
            }

            //width
            item.style.maxWidth = (itemRect.width + "px");
        
            relativeY = itemRect.top - 5;
            firstY = y;
        }

        let difference = (y - firstY);
        let top = relativeY + difference;
        item.style.transition = null;
        item.style.position = "fixed";
        item.style.zIndex = 1;
        item.style.top = (top + "px");
        item.classList.add("menu_work_list_sort_mode_item_foucs");

        //위치 이동
        let min = null;
        let order = null;
        let children = contents.getElementsByClassName("work_contents")[0].children;
        for (let i = 0; i < children.length; i++) {
            if (children[i].classList.contains("visible_element") == false) {
                //위치가 가장 가까운
                let rect = children[i].getBoundingClientRect();

                let isCenter = false;
                if (difference >= ((itemHeight * -1) / 2) && difference <= 0) {
                    order = previousOrder;
                    isBottom = false;
                    isCenter = true;
                } else if (difference <= (itemHeight / 2) && difference >= 0) {
                    order = previousOrder;
                    isBottom = false;
                    isCenter = true;
                }

                if (isCenter == false && children[i].getAttribute("order") != previousOrder) {
                    if (difference <= 0) {
                        let differenceTop = (rect.top - ((itemRect.top + (itemHeight / 2)) - (itemHeight / 2))) - (itemHeight / 4);
                        (differenceTop < 0) ? differenceTop *= -1 : null;
        
                        if (min == null) {
                            min = differenceTop;
                            order = children[i].getAttribute("order");
                        } else if (min > differenceTop) {
                            min = differenceTop;
                            order = children[i].getAttribute("order");
                        }
                        isBottom = false;
                    } else {
                        let differenceTop = (rect.bottom - ((itemRect.top + (itemHeight / 2)) - itemHeight)) + ((itemHeight / 2) - 5);
                        (differenceTop < 0) ? differenceTop *= -1 : null;
                        
                        if (min == null) {
                            min = differenceTop;
                            order = children[i].getAttribute("order");
                        } else if (min > differenceTop) {
                            min = differenceTop;
                            order = children[i].getAttribute("order");
                        }
                        isBottom = true;
                    }
                }
            }
        }
        if (order != null && item.getAttribute("order") != order) {
            if (isBottom == true && previousOrder != (Number.parseInt(order) + 1)) {
                workListChangeOrderWrap(Number.parseInt(order) + 1);
                item.setAttribute("order", order);
            } else if (isBottom == false && previousOrder != (Number.parseInt(order) - 1)) {
                workListChangeOrderWrap(order);
                item.setAttribute("order", order);
            }
        }
    }
    function end() {
        item.classList.remove("menu_work_list_sort_mode_item_foucs");
        let order = Number.parseInt(item.getAttribute("order"));

        let work_contents = contents.getElementsByClassName("work_contents")[0];
        let maxOrder = Number.parseInt(work_contents.getAttribute("order"));
        maxOrder --;
        (order > maxOrder) ? order = maxOrder : null;

        //
        item.style.transition = null;

        for (let i = 0; i < children.length; i++) {
            if (children[i].classList.contains("visible_element")) {
                let childrenOrder = Number.parseInt(children[i].getAttribute("order"));
                if (previousOrder < order) {
                    if (childrenOrder >= previousOrder && childrenOrder <= order) {
                        let setOrder = childrenOrder - 1;
                        children[i].style.order = (setOrder * 2) + 1;
                        children[i].setAttribute("order", setOrder);
                    }
                }
                if (previousOrder > order) {
                    if (childrenOrder <= previousOrder && previousOrder >= order) {
                        if (childrenOrder >= order) {
                            let setOrder = childrenOrder + 1;
                            children[i].style.order = (setOrder * 2) + 1;
                            children[i].setAttribute("order", setOrder);
                        }
                    }
                }
            }
        }

        //변경사항 적용
        if (previousOrder != order) {
            let workListInfo = JSON.parse(contents.getElementsByClassName("work_list_info")[0].innerHTML);
            requestWorkListChangeOrder(workListInfo["number"], item.getAttribute("work_number"), order);
        }

        hideWorkListChangeOrderWrap();
        let itemRect = item.getBoundingClientRect();
        let previousTop = itemRect.top;
        item.style.order = (order * 2) + 1;
        item.setAttribute("order", order);
        item.style.position = null;
        item.style.maxWidth = null;

        //예전 스크롤 내용
        document.body.scrollTo(0, previousScrollY);
        setHeaderTop();

        itemRect = item.getBoundingClientRect();
        item.style.transform = "translateY(" + (previousTop - itemRect.top) + "px)";

        //height 고정 풀기
        workContents.style.height = null;

        function callback() {
            item.style.transition = "all 0.2s";
            item.style.transform = null;
            if (isBodyScroll == false) {
                setBodyScroll(true); //스크롤 풀기
            }
        }
        window.requestAnimationFrame(callback);

        document.removeEventListener("touchmove", move);
        document.removeEventListener("touchend", end);
        document.removeEventListener("touchcancel", end);
        document.removeEventListener("mousemove", move);
        document.removeEventListener("mouseup", end);
        document.removeEventListener("mouseleave", end);
        document.removeEventListener("scroll", move);

        isEnd = true;
    }

    //프레임마다 예전 스크롤 내용을 유지
    function callback() {
        if (isEnd == false) {
            //예전 스크롤 내용
            document.body.scrollTo(0, previousScrollY);
            setHeaderTop();

            window.requestAnimationFrame(callback);
        }
    }
    window.requestAnimationFrame(callback);

    //터치 이벤트
    document.addEventListener("touchmove", move);
    document.addEventListener("touchend", end);
    document.addEventListener("touchcancel", end);
    //마우스 이벤트
    document.addEventListener("mousemove", move);
    document.addEventListener("mouseup", end);
    //스크롤 이벤트
    document.addEventListener("scroll", move);
}

function workListChangeOrderWrap(order) {
    let menuNumber = getCurrentMenuNumber();
    let contents = document.getElementById("contents_" + menuNumber);
    let children = contents.getElementsByClassName("work_contents")[0].children;
    for (let i = 0; i < children.length; i++) {
        if (children[i].classList.contains("visible_element") == false) {
            if (children[i].getAttribute("order") == order) {
                children[i].setAttribute("area", "true");
            } else {
                children[i].setAttribute("area", "false");
            }
        }
    }
}
function hideWorkListChangeOrderWrap() {
    let menuNumber = getCurrentMenuNumber();
    let contents = document.getElementById("contents_" + menuNumber);
    let children = contents.getElementsByClassName("work_contents")[0].children;
    for (let i = 0; i < children.length; i++) {
        if (children[i].classList.contains("visible_element") == false) {
            children[i].style.transition = "all 0s";
            children[i].setAttribute("area", "false");
            function callback() {
                children[i].style.transition = null;
            }
            window.requestAnimationFrame(callback);
        }
    }
}































function requestWorkListChangeOrder(workListNumber, workNumber, order) {
    loading();

    const xhr = new XMLHttpRequest();
    const method = "POST";
    
    xhr.open(method, "/php/work_list/change_order.php");
    
    xhr.addEventListener('readystatechange', function (event) {
        const { target } = event;
        if (target.readyState === XMLHttpRequest.DONE) {
            const { status } = target;
            if (status === 0 || (status >= 200 && status < 400)) {
                let xhrHtml = xhr.responseText;
                
                actionMessage(getLanguage("work_list_reorder_message"));
            } else {
                if (status == 504) {
                    //시간 초과
                    serverResponseErrorMessage(0);
                } else {
                    //오류 발생
                    serverResponseErrorMessage(1);
                }
            }
            loadingComplete();
        }
    });

    var formData = new FormData();
    formData.append("lang", userLanguage);
    formData.append("workListNumber", workListNumber);
    formData.append("workNumber", workNumber);
    formData.append("order", order);

    xhr.send(formData);
}






























































function workListWorkMoreItems(event, menuNumber, workListNumber, workNumber, userNumber) {
    let slot = new Array();

    if (loginStatus["number"] == userNumber) {
        slot[slot.length] = {
            'icon': '<!-- Generated by IcoMoon.io --><svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 22 28"><path d="M8 11.5v9c0 0.281-0.219 0.5-0.5 0.5h-1c-0.281 0-0.5-0.219-0.5-0.5v-9c0-0.281 0.219-0.5 0.5-0.5h1c0.281 0 0.5 0.219 0.5 0.5zM12 11.5v9c0 0.281-0.219 0.5-0.5 0.5h-1c-0.281 0-0.5-0.219-0.5-0.5v-9c0-0.281 0.219-0.5 0.5-0.5h1c0.281 0 0.5 0.219 0.5 0.5zM16 11.5v9c0 0.281-0.219 0.5-0.5 0.5h-1c-0.281 0-0.5-0.219-0.5-0.5v-9c0-0.281 0.219-0.5 0.5-0.5h1c0.281 0 0.5 0.219 0.5 0.5zM18 22.813v-14.812h-14v14.812c0 0.75 0.422 1.188 0.5 1.188h13c0.078 0 0.5-0.438 0.5-1.188zM7.5 6h7l-0.75-1.828c-0.047-0.063-0.187-0.156-0.266-0.172h-4.953c-0.094 0.016-0.219 0.109-0.266 0.172zM22 6.5v1c0 0.281-0.219 0.5-0.5 0.5h-1.5v14.812c0 1.719-1.125 3.187-2.5 3.187h-13c-1.375 0-2.5-1.406-2.5-3.125v-14.875h-1.5c-0.281 0-0.5-0.219-0.5-0.5v-1c0-0.281 0.219-0.5 0.5-0.5h4.828l1.094-2.609c0.313-0.766 1.25-1.391 2.078-1.391h5c0.828 0 1.766 0.625 2.078 1.391l1.094 2.609h4.828c0.281 0 0.5 0.219 0.5 0.5z"></path></svg>',
            'title': getLanguage("work_list_work_more_button:delete"),
            'onclick': 'requestWorkListWorkDelete(' + menuNumber + ', ' + workListNumber + ', ' + workNumber + ');',
            'class': 'more_button_item_delete',
        };
    }

    let items = getMoreItemsWorkElement(workNumber);
    for (let i = 0; i < items.length; i++) {
        slot[slot.length] = items[i];
    }

    moreButton(null, slot, event);
}

function workListMoreItems(el, menuNumber, workListNumber, userNumber) {
    let slot = new Array();

    if (loginStatus["number"] == userNumber) {
        slot[0] = {
            'icon': '<!-- Generated by IcoMoon.io --><svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 22 28"><path d="M8 11.5v9c0 0.281-0.219 0.5-0.5 0.5h-1c-0.281 0-0.5-0.219-0.5-0.5v-9c0-0.281 0.219-0.5 0.5-0.5h1c0.281 0 0.5 0.219 0.5 0.5zM12 11.5v9c0 0.281-0.219 0.5-0.5 0.5h-1c-0.281 0-0.5-0.219-0.5-0.5v-9c0-0.281 0.219-0.5 0.5-0.5h1c0.281 0 0.5 0.219 0.5 0.5zM16 11.5v9c0 0.281-0.219 0.5-0.5 0.5h-1c-0.281 0-0.5-0.219-0.5-0.5v-9c0-0.281 0.219-0.5 0.5-0.5h1c0.281 0 0.5 0.219 0.5 0.5zM18 22.813v-14.812h-14v14.812c0 0.75 0.422 1.188 0.5 1.188h13c0.078 0 0.5-0.438 0.5-1.188zM7.5 6h7l-0.75-1.828c-0.047-0.063-0.187-0.156-0.266-0.172h-4.953c-0.094 0.016-0.219 0.109-0.266 0.172zM22 6.5v1c0 0.281-0.219 0.5-0.5 0.5h-1.5v14.812c0 1.719-1.125 3.187-2.5 3.187h-13c-1.375 0-2.5-1.406-2.5-3.125v-14.875h-1.5c-0.281 0-0.5-0.219-0.5-0.5v-1c0-0.281 0.219-0.5 0.5-0.5h4.828l1.094-2.609c0.313-0.766 1.25-1.391 2.078-1.391h5c0.828 0 1.766 0.625 2.078 1.391l1.094 2.609h4.828c0.281 0 0.5 0.219 0.5 0.5z"></path></svg>',
            'title': getLanguage("delete"),
            'onclick': 'deleteWorkListMenuWorkList(' + menuNumber + ', ' + workListNumber + ');',
            'class': 'more_button_item_delete',
        };
    } else {
        //
        let checked = false;
        for (let i = 0; i < myWorkList.length; i++) {
            if (myWorkList[i]["number"] == workListNumber) {
                checked = true;
            }
        }
        if (checked == true) {
            slot[slot.length] = {
                'icon': '<!-- Generated by IcoMoon.io --><svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 22 28"><path d="M8 11.5v9c0 0.281-0.219 0.5-0.5 0.5h-1c-0.281 0-0.5-0.219-0.5-0.5v-9c0-0.281 0.219-0.5 0.5-0.5h1c0.281 0 0.5 0.219 0.5 0.5zM12 11.5v9c0 0.281-0.219 0.5-0.5 0.5h-1c-0.281 0-0.5-0.219-0.5-0.5v-9c0-0.281 0.219-0.5 0.5-0.5h1c0.281 0 0.5 0.219 0.5 0.5zM16 11.5v9c0 0.281-0.219 0.5-0.5 0.5h-1c-0.281 0-0.5-0.219-0.5-0.5v-9c0-0.281 0.219-0.5 0.5-0.5h1c0.281 0 0.5 0.219 0.5 0.5zM18 22.813v-14.812h-14v14.812c0 0.75 0.422 1.188 0.5 1.188h13c0.078 0 0.5-0.438 0.5-1.188zM7.5 6h7l-0.75-1.828c-0.047-0.063-0.187-0.156-0.266-0.172h-4.953c-0.094 0.016-0.219 0.109-0.266 0.172zM22 6.5v1c0 0.281-0.219 0.5-0.5 0.5h-1.5v14.812c0 1.719-1.125 3.187-2.5 3.187h-13c-1.375 0-2.5-1.406-2.5-3.125v-14.875h-1.5c-0.281 0-0.5-0.219-0.5-0.5v-1c0-0.281 0.219-0.5 0.5-0.5h4.828l1.094-2.609c0.313-0.766 1.25-1.391 2.078-1.391h5c0.828 0 1.766 0.625 2.078 1.391l1.094 2.609h4.828c0.281 0 0.5 0.219 0.5 0.5z"></path></svg>',
                'title': getLanguage("work_list_more_button:save_delete"),
                'onclick': 'workListSaveButton(' + menuNumber + ', ' + workListNumber + ', false);',
                'class': 'more_button_item_delete',
            };
        } else {
            slot[slot.length] = {
                'icon': '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="50" height="50" viewBox="0 0 50 50"><defs><clipPath id="b"><rect width="50" height="50"/></clipPath></defs><g id="a" clip-path="url(#b)"><rect width="37" height="3" rx="1.5" transform="translate(1 2)"/><rect width="37" height="3" rx="1.5" transform="translate(1 18)"/><rect width="20" height="3" rx="1.5" transform="translate(1 34)"/><g transform="translate(1 -1)"><g transform="translate(-0.075 1.515)"><rect width="3.678" height="23.098" rx="1.839" transform="translate(25.075 36.713) rotate(-90)"/></g><g transform="translate(71.018 -0.075) rotate(90)"><rect width="3.434" height="23.098" rx="1.717" transform="translate(25.075 36.469) rotate(-90)"/></g></g></g></svg>',
                'title': getLanguage("work_list_more_button:save_insert"),
                'onclick': 'workListSaveButton(' + menuNumber + ', ' + workListNumber + ', true);',
            };
        }
    }

    moreButton(el, slot);
}





function getWorkListSortItems() {
    let items = new Array();
    items[0] = {
        "title": getLanguage("work_list_select_sort:0"),
        "value": 0
    }
    items[1] = {
        "title": getLanguage("work_list_select_sort:1"),
        "value": 1
    }
    items[2] = {
        "title": getLanguage("work_list_select_sort:2"),
        "value": 2
    }
    return items;
}
function getWorkListWorkTypeItems() {
    let items = new Array();
    items[0] = {
        "title": getLanguage("popup_search_filter_value_work_type:0"),
        "icon": '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="50" height="50" viewBox="0 0 50 50"><defs><clipPath id="b"><rect width="50" height="50"/></clipPath></defs><g id="a" clip-path="url(#b)"><path d="M25,700a1.5,1.5,0,0,1,.844.26l23.5,16A1.5,1.5,0,0,1,49.4,718.7L25.9,736.2a1.5,1.5,0,0,1-1.792,0L.6,718.7a1.5,1.5,0,0,1,.052-2.443l23.5-16A1.5,1.5,0,0,1,25,700Zm20.915,17.555L25,703.315,4.085,717.555,25,733.13Z" transform="translate(0 -700)"/><path d="M24.953,736.551a1.5,1.5,0,0,1-.9-.3L.6,718.754a1.5,1.5,0,0,1,1.794-2.4l22.558,16.832,22.65-16.834a1.5,1.5,0,1,1,1.789,2.408l-23.547,17.5A1.5,1.5,0,0,1,24.953,736.551Z" transform="translate(0 -686.551)"/></g></svg>>',
        "value": 0
    }
    items[1] = {
        "title": getLanguage("work_settings_contents_type:0"),
        "icon": '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="50" height="50" viewBox="0 0 50 50"><defs><clipPath id="b"><rect width="50" height="50"/></clipPath></defs><g id="a" clip-path="url(#b)"><path d="M-72.583-761.2c-2.946-3.826-6.227-5.765-9.755-5.765h0c-6.133,0-11.229,5.774-11.281,5.833a1.5,1.5,0,0,1-1.126.517h-.006a1.5,1.5,0,0,1-1.124-.506c-3.431-3.877-7.015-5.844-10.651-5.844h0c-6.23,0-10.743,5.713-10.788,5.771a1.5,1.5,0,0,1-1.67.5A1.5,1.5,0,0,1-120-762.116v-30.063a1.5,1.5,0,0,1,.318-.922c3.574-4.578,7.7-6.9,12.273-6.9h0c5.73,0,10.491,3.7,12.606,5.656C-91.165-798.1-87.269-800-83.2-800c7.569,0,12.778,6.622,13,6.9a1.5,1.5,0,0,1,.313.917v30.063a1.5,1.5,0,0,1-1.017,1.42,1.5,1.5,0,0,1-.483.08A1.5,1.5,0,0,1-72.583-761.2Zm-20.812-4.26c2.423-1.988,6.408-4.5,11.056-4.5h0a13.728,13.728,0,0,1,9.444,3.972v-25.638a19,19,0,0,0-2.779-2.56A12.553,12.553,0,0,0-83.2-797c-3.485,0-6.913,1.867-10.191,5.549ZM-117-791.653v25.91a16.593,16.593,0,0,1,10.471-4.223h0a15.532,15.532,0,0,1,10.132,4.125v-25.873c-1.474-1.438-5.9-5.285-11.013-5.285h0C-110.882-797-114.105-795.2-117-791.653Z" transform="translate(119.895 805.308)"/></g></svg>',
        "value": 1
    }
    items[2] = {
        "title": getLanguage("work_settings_contents_type:1"),
        "icon": '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="50" height="50" viewBox="0 0 50 50"><defs><clipPath id="b"><rect width="50" height="50"/></clipPath></defs><g id="a" clip-path="url(#b)"><path d="M3,3H3V18H47V3H3M3,0H47a3,3,0,0,1,3,3V18a3,3,0,0,1-3,3H3a3,3,0,0,1-3-3V3A3,3,0,0,1,3,0Z"/><path d="M1.5,925H27a1.5,1.5,0,0,1,1.329,2.195l-11.5,22A1.5,1.5,0,0,1,15.5,950H1.508a1.5,1.5,0,0,1-1.5-1.5L0,926.5A1.5,1.5,0,0,1,1.5,925Zm23.023,3H3l.007,19H14.592Z" transform="translate(0 -900)"/><path d="M1.5,927H26a1.5,1.5,0,0,1,1.33,2.194l-11.5,22.03a1.5,1.5,0,0,1-1.33.806h-.006l-13.5-.053A1.5,1.5,0,0,1-.5,950.442L0,928.466A1.5,1.5,0,0,1,1.5,927Zm22.025,3H2.966l-.432,18.982,11.058.044Z" transform="translate(49.5 977) rotate(180)"/></g></svg>',
        "value": 2
    }
    items[3] = {
        "title": getLanguage("work_settings_contents_type:2"),
        "icon": '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="50" height="50" viewBox="0 0 50 50"><defs><clipPath id="b"><rect width="50" height="50"></rect></clipPath></defs><g id="a" clip-path="url(#b)"><path d="M121.5,500h47a1.5,1.5,0,0,1,1.5,1.5V516a1.5,1.5,0,0,1-1.218,1.473l-47,9A1.5,1.5,0,0,1,120,525V501.5A1.5,1.5,0,0,1,121.5,500Zm45.5,3H123v20.186l44-8.426Z" transform="translate(-120 -500)"></path><path d="M121.5,500h47a1.5,1.5,0,0,1,1.5,1.5V516a1.5,1.5,0,0,1-1.218,1.473l-47,9A1.5,1.5,0,0,1,120,525V501.5A1.5,1.5,0,0,1,121.5,500Zm45.5,3H123v20.186l44-8.426Z" transform="translate(170 550) rotate(180)"></path></g></svg>',
        "value": 3
    }
    items[4] = {
        "title": getLanguage("work_settings_contents_type:3"),
        "icon": '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="50" height="50" viewBox="0 0 50 50"><defs><clipPath id="b"><rect width="50" height="50"/></clipPath></defs><g id="a" clip-path="url(#b)"><path d="M6.712,1000a1.5,1.5,0,0,1,.745.2l41.052,23.5a1.5,1.5,0,0,1,0,2.6L7.458,1049.8a1.5,1.5,0,0,1-2.245-1.3v-47a1.5,1.5,0,0,1,1.5-1.5Zm38.032,25L8.212,1004.087v41.826Z" transform="translate(0.736 -1000)"/></g></svg>',
        "value": 4
    }
    return items;
}

function getWorkListPublicStateItems() {
    let items = new Array();
    items[0] = {
        "icon": '<!-- Generated by IcoMoon.io --><svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 12h14c0.276 0 0.525 0.111 0.707 0.293s0.293 0.431 0.293 0.707v7c0 0.276-0.111 0.525-0.293 0.707s-0.431 0.293-0.707 0.293h-14c-0.276 0-0.525-0.111-0.707-0.293s-0.293-0.431-0.293-0.707v-7c0-0.276 0.111-0.525 0.293-0.707s0.431-0.293 0.707-0.293zM8 10v-3c-0.001-1.106 0.445-2.105 1.169-2.831 0.723-0.724 1.719-1.172 2.821-1.174 1.030 0.003 1.948 0.378 2.652 1 0.638 0.565 1.097 1.332 1.28 2.209 0.113 0.541 0.642 0.888 1.183 0.775s0.888-0.642 0.775-1.183c-0.272-1.307-0.958-2.454-1.912-3.299-1.060-0.938-2.452-1.504-3.973-1.502-1.657 0.002-3.157 0.676-4.241 1.762s-1.756 2.587-1.754 4.243v3h-1c-0.828 0-1.58 0.337-2.121 0.879s-0.879 1.293-0.879 2.121v7c0 0.828 0.337 1.58 0.879 2.121s1.293 0.879 2.121 0.879h14c0.828 0 1.58-0.337 2.121-0.879s0.879-1.293 0.879-2.121v-7c0-0.828-0.337-1.58-0.879-2.121s-1.293-0.879-2.121-0.879z"></path></svg>',
        "title": getLanguage("public_status:0"),
        "value": 0
    }
    items[1] = {
        "icon": '<!-- Generated by IcoMoon.io --><svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15 8h3c1.105 0 2.103 0.447 2.828 1.172s1.172 1.723 1.172 2.828-0.447 2.103-1.172 2.828-1.723 1.172-2.828 1.172h-3c-0.552 0-1 0.448-1 1s0.448 1 1 1h3c1.657 0 3.158-0.673 4.243-1.757s1.757-2.586 1.757-4.243-0.673-3.158-1.757-4.243-2.586-1.757-4.243-1.757h-3c-0.552 0-1 0.448-1 1s0.448 1 1 1zM9 16h-3c-1.105 0-2.103-0.447-2.828-1.172s-1.172-1.723-1.172-2.828 0.447-2.103 1.172-2.828 1.723-1.172 2.828-1.172h3c0.552 0 1-0.448 1-1s-0.448-1-1-1h-3c-1.657 0-3.158 0.673-4.243 1.757s-1.757 2.586-1.757 4.243 0.673 3.158 1.757 4.243 2.586 1.757 4.243 1.757h3c0.552 0 1-0.448 1-1s-0.448-1-1-1zM8 13h8c0.552 0 1-0.448 1-1s-0.448-1-1-1h-8c-0.552 0-1 0.448-1 1s0.448 1 1 1z"></path></svg>',
        "title": getLanguage("public_status:1"),
        "value": 1
    }
    items[2] = {
        "icon": '<!-- Generated by IcoMoon.io --><svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 12h14c0.276 0 0.525 0.111 0.707 0.293s0.293 0.431 0.293 0.707v7c0 0.276-0.111 0.525-0.293 0.707s-0.431 0.293-0.707 0.293h-14c-0.276 0-0.525-0.111-0.707-0.293s-0.293-0.431-0.293-0.707v-7c0-0.276 0.111-0.525 0.293-0.707s0.431-0.293 0.707-0.293zM18 10v-3c0-1.657-0.673-3.158-1.757-4.243s-2.586-1.757-4.243-1.757-3.158 0.673-4.243 1.757-1.757 2.586-1.757 4.243v3h-1c-0.828 0-1.58 0.337-2.121 0.879s-0.879 1.293-0.879 2.121v7c0 0.828 0.337 1.58 0.879 2.121s1.293 0.879 2.121 0.879h14c0.828 0 1.58-0.337 2.121-0.879s0.879-1.293 0.879-2.121v-7c0-0.828-0.337-1.58-0.879-2.121s-1.293-0.879-2.121-0.879zM8 10v-3c0-1.105 0.447-2.103 1.172-2.828s1.723-1.172 2.828-1.172 2.103 0.447 2.828 1.172 1.172 1.723 1.172 2.828v3z"></path></svg>',
        "title": getLanguage("public_status:2"),
        "value": 2
    }
    return items;
}








































































function checkMenuWorkListBackground() {
    if (getCurrentMenuName() == "work_list") {
        let menuNumber = getCurrentMenuNumber();
        let contents = document.getElementById("contents_" + menuNumber);

        if (contents.getElementsByClassName("menu_work_list_left").length != 0) {
            let work_list_left = contents.getElementsByClassName("menu_work_list_left")[0];
            let height = work_list_left.clientHeight;
    
            let background = contents.getElementsByClassName("menu_work_list_left_background")[0];
            background.style.height = height + "px";
            let gradation = contents.getElementsByClassName("menu_work_list_left_gradation")[0];
            gradation.style.height = height + "px";
        }
    }
}
window.addEventListener("resize", checkMenuWorkListBackground);
window.addEventListener("focus", checkMenuWorkListBackground);

function delayCheckMenuWorkListBackground() {
    function callback() {
        checkMenuWorkListBackground();
    }
    window.requestAnimationFrame(callback);
}