

var speechToTextSearch = null;

function getHtmlPopupContents_speech_to_text_search(isMobileSearch) {
    let html = '';

    try {
        speechToTextSearch = new (window.SpeechRecognition || window.webkitSpeechRecognition || window.mozSpeechRecognition || window.msSpeechRecognition)();
    } catch(e) {}

    //recognition가 NULL이면 음성 인식을 지원하지 않는 것임
    let title = getLanguage("speech_to_text_search_title:6");
    let description = getLanguage("speech_to_text_search_description:6");
    let lineStyle = "";
    if (speechToTextSearch == null) {
        title = getLanguage("speech_to_text_search_title:5");
        description = getLanguage("speech_to_text_search_description:5");
        lineStyle = "animation: popupSpeechToTextSearchLineUnAuth infinite 1s;";
    }

    html = `
        <div class = "edit_profile_picture">
            <div class = "popup_contents_top">
                <div class = "popup_contents_top_left md-ripples" onclick = "backPopupContents();" onmouseenter = "hoverInformation(this, getLanguage('popup_contents:back'));">
                    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="50" height="50" viewBox="0 0 50 50"><defs><clipPath id="b"><rect width="50" height="50"></rect></clipPath></defs><g id="a" clip-path="url(#b)"><g transform="translate(-12.086 -0.24)"><rect width="3" height="35" rx="1.5" transform="translate(36.399 0.479) rotate(45)"></rect><rect width="3" height="35" rx="1.5" transform="translate(38.521 47.879) rotate(135)"></rect></g><rect width="49" height="3" rx="1.5" transform="translate(1 23.5)"></rect></g></svg>
                </div>
                <div class = "popup_contents_top_right">
                    ` + getLanguage('header_search_stt_button') + `
                </div>
            </div>

            <div class = "popup_speech_to_text_search">
                <div class = "popup_speech_to_text_search_wrap">
                    <div class = "popup_speech_to_text_search_button md-ripples" onclick = "popupSpeechToTextSearchStart(` + isMobileSearch + `);">
                        <!-- Generated by IcoMoon.io -->
                        <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.297 11.016h1.688q0 2.531-1.758 4.43t-4.242 2.273v3.281h-1.969v-3.281q-2.484-0.375-4.242-2.273t-1.758-4.43h1.688q0 2.203 1.57 3.633t3.727 1.43 3.727-1.43 1.57-3.633zM12 14.016q-1.219 0-2.109-0.891t-0.891-2.109v-6q0-1.219 0.891-2.109t2.109-0.891 2.109 0.891 0.891 2.109v6q0 1.219-0.891 2.109t-2.109 0.891z"></path></svg>
                    </div>
                    <div class = "popup_speech_to_text_search_button_ani"></div>
                    <div class = "popup_speech_to_text_search_title">
                        ` + title + `
                    </div>
                    <div class = "popup_speech_to_text_search_description">
                        ` + description + `
                    </div>
                </div>
                <div class = "popup_speech_to_text_search_wrap_line_wrap">
                    <div class = "popup_speech_to_text_search_wrap_line_line" style = "` + lineStyle + `"></div>
                </div>
            </div>

            <div style = "width: 500px;"></div>
        </div>
    `;

    //음성 인식 시작하기
    function callback() {
        popupSpeechToTextSearchStart(isMobileSearch);
    }
    window.requestAnimationFrame(callback);

    return html;
}

var isPopupSpeechToTextSearchLoading = false;
var isPopupSpeechToTextSearchStart = false;

function popupSpeechToTextSearchStart(isMobileSearch) {
    let popupContents = document.getElementsByClassName("popup_contents")[0];
    let title = popupContents.getElementsByClassName("popup_speech_to_text_search_title")[0];
    let description = popupContents.getElementsByClassName("popup_speech_to_text_search_description")[0];
    let line = popupContents.getElementsByClassName("popup_speech_to_text_search_wrap_line_line")[0];
    let buttonAni = popupContents.getElementsByClassName("popup_speech_to_text_search_button_ani")[0];

    if (isPopupSpeechToTextSearchStart == true) {
        speechToTextSearch.stop();

        title.innerHTML = getLanguage("speech_to_text_search_title:0");
        description.innerHTML = getLanguage("speech_to_text_search_description:0");
        line.style.animation = null;
        buttonAni.style.animation = null;

        isPopupSpeechToTextSearchStart = false;
        return;
    }

    let language = userLanguage;
    let location = null;
    Object.entries(relatedLanguages).forEach(entry => {
        const [key, value] = entry;

        if (value == language) {
            location = key;
        }
    });
    language = language + "-" + location.toUpperCase();

    let recognition = speechToTextSearch;
    recognition.interimResults = true;
    recognition.lang = language;
    recognition.start();
    let isEnd = false;
    let isStartEvent = false;
    
    recognition.onstart = function() {
        title.innerHTML = getLanguage("speech_to_text_search_title:2");
        description.innerHTML = getLanguage("speech_to_text_search_description:2");
        line.style.animation = "popupSpeechToTextSearchLineListening infinite 1s";
        buttonAni.style.animation = "popupSpeechToTextSearchButtonAni infinite 1s";

        isEnd = false;
        isStartEvent = true;
        isPopupSpeechToTextSearchStart = true;
    }

    let resultText = "";
    let speechToText = "";
    recognition.onresult = function(event) {
        function callback() {
            if (isEnd == false) {
                let interimTranscript = "";
                for (let i = event.resultIndex; i < event.results.length; i++) {
                    let transcript = event.results[i][0].transcript;
                    
                    if (event.results[i].isFinal) {
                        speechToText += transcript;
                    } else {
                        interimTranscript += transcript;
                    }
                }
        
                let text = speechToText + interimTranscript;
                if (text.trim() != "") {
                    title.innerHTML = text;
                    resultText = text;
                }
            }
        }
        window.requestAnimationFrame(callback);
    }

    recognition.onend = function() {
        if (isStartEvent == false) {
            title.innerHTML = getLanguage("speech_to_text_search_title:4");
            description.innerHTML = getLanguage("speech_to_text_search_description:4");
            line.style.animation = "popupSpeechToTextSearchLineUnAuth infinite 1s";
            buttonAni.style.animation = null;
        }
        isPopupSpeechToTextSearchStart = false;
        isEnd = true;
    }

    recognition.onspeechend = function() {
        isEnd = true;
        if (resultText.trim() != "") {
            //검색
            title.innerHTML = getLanguage("speech_to_text_search_title:3").replaceAll("{R:0}", resultText);
            description.innerHTML = getLanguage("speech_to_text_search_description:3");
            line.style.animation = "popupSpeechToTextSearchLineLoading infinite 1s";
            buttonAni.style.animation = null;

            //쿼리 문자열이 중복하는지
            let isHistoryNoStack = false;
            let property = currentMenuProperty;
            if (property != null && property["historySearch"] == resultText) {
                isHistoryNoStack = true;
            }

            if (isMobileSearch == true) {
                history.back();
                history.back();
                timesIgnoreHistoryEvent = 2;
            } else {
                history.back();
                ignoreHistoryEvent = true;
            }
            isPopupSpeechToTextSearchLoading = true;
            
            function callback() {
                function callback2() {
                    function callback3() {
                        loadMenu_search(resultText, false, isHistoryNoStack);
                    }
                    window.requestAnimationFrame(callback3);
                }
                window.requestAnimationFrame(callback2);
            }
            window.requestAnimationFrame(callback);
        } else {
            //결과 없음
            title.innerHTML = getLanguage("speech_to_text_search_title:1");
            description.innerHTML = getLanguage("speech_to_text_search_description:1");
            line.style.animation = null;
            buttonAni.style.animation = null;
        }
    }
}